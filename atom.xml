<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vanilla&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-25T08:01:23.300Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>vanilla</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web课堂笔记5.10</title>
    <link href="http://example.com/2022/05/10/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B05-10/"/>
    <id>http://example.com/2022/05/10/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B05-10/</id>
    <published>2022-05-10T00:54:07.000Z</published>
    <updated>2022-05-25T08:01:23.300Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;c:out value&#x3D;””要显示的数据对象&gt;<br>&lt;c:out value&#x3D;”字符串”&gt;<br>&lt;c:out value&#x3D;”EL表达式”&gt;</p><h1 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h1><p>在JSP中简化表达式</p><h3 id="获取四大域中的数据"><a href="#获取四大域中的数据" class="headerlink" title="获取四大域中的数据"></a>获取四大域中的数据</h3><p>JSP脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=request.getAttribute(name)%&gt;</span><br></pre></td></tr></table></figure><p>EL:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;requestScope.key&#125;</span><br></pre></td></tr></table></figure><p><strong>·pageContext域中的值：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;pageScope.key&#125;</span><br></pre></td></tr></table></figure><p><strong>·request域中的值：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;requestScope.key&#125;</span><br></pre></td></tr></table></figure><p><strong>·session域中的值：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;sessionScope.key&#125;</span><br></pre></td></tr></table></figure><p><strong>·application域中的值：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;applicationScope.key&#125;</span><br></pre></td></tr></table></figure><h3 id="直接-key"><a href="#直接-key" class="headerlink" title="直接${key}"></a>直接${key}</h3><p>依次从pageContext域、request域、session域、application域中获取<br>如果没有重名，可以使用</p><h2 id="EL操作对象"><a href="#EL操作对象" class="headerlink" title="EL操作对象"></a>EL操作对象</h2><ul><li>操作变量和常量：${name}、${8}</li><li>操作List和数组：${list[0]}、${arr[0]}<br>每次只能访问一个元素</li><li>操作bean的属性：${person.name}、${person[‘name’]}，对应person.getName()方法<br>[]中可以是变量，而.后面只能是属性名</li><li>操作Map的值:${map.key}、${map[‘key’]}，对应map.get(key)<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3></li><li>param,paramValues<br>接收请求中的参数${param.name}</li><li>header，headerValue<br>获取请求头信息</li><li>initParam<br>获取全局初始化参数</li><li>cookie</li><li>pageContext<br>pageContext可以获取其他八大对象<br>协议：${pageContext.request.scheme}<br>服务器ip：${pageContext.request.serverName}<br>服务器端口：${pageContext.request.serverPort}<h2 id="EL运算"><a href="#EL运算" class="headerlink" title="EL运算"></a>EL运算</h2>除：div或&#x2F;<br>取余：mod或%<br>等于：&#x3D;&#x3D;或eq<br>不等于：!&#x3D;或ne<br>小于：&lt;或lt<br>大于：&gt;或ge<br>…………</li></ul><h1 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h1><p>流程控制语言<br>导入jar包<br>先引入标签库<br>&lt;%@taglib prefix&#x3D;”c” uri&#x3D;”<a href="http://java.sun.com/jsp/jstl/core&quot;%&gt;">http://java.sun.com/jsp/jstl/core&quot;%&gt;</a></p><h2 id="lt-c-set-gt"><a href="#lt-c-set-gt" class="headerlink" title="&lt;c:set&gt;"></a>&lt;c:set&gt;</h2><p>用于把某一个对象存在指定的域范围内，或者将某一个对象存储到Map或者JavaBean对象中。</p><ul><li>1<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set value=&quot;key1&quot; var=&quot;name1&quot; [scope=&quot;page|request|session|application&quot;]/&gt;</span><br></pre></td></tr></table></figure>默认放page</li><li>2<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set value=&quot;值&quot; target=&quot;JavaBean对象&quot; property=&quot;属性名&quot;/&gt;</span><br></pre></td></tr></table></figure>还有一种写法吧值写在&lt;c:…&gt;值&lt;\c&gt;</li></ul><h2 id="lt-c-out-gt"><a href="#lt-c-out-gt" class="headerlink" title="&lt;c:out&gt;"></a>&lt;c:out&gt;</h2><p>&lt;c:out value&#x3D;”字符串”&#x2F;&gt;<br>&lt;c:out value&#x3D;”el表达式”&gt;</p><h2 id="lt-c-if-gt"><a href="#lt-c-if-gt" class="headerlink" title="&lt;c:if&gt;"></a>&lt;c:if&gt;</h2><p>流程控制——判断<br>&lt;c:if test&#x3D;”条件” var&#x3D;”varName”<br>[scope&#x3D;”{page|request|session|application}”]&#x2F;&gt;</p><h2 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;c:when tset=&quot;条件1&quot;&gt;业务逻辑&lt;/c:when&gt;</span><br><span class="line">    ………………</span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><h2 id="lt-c-forEach-gt"><a href="#lt-c-forEach-gt" class="headerlink" title="&lt;c:forEach&gt;"></a>&lt;c:forEach&gt;</h2><p>循环遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach</span><br><span class="line">var=&quot;name&quot;</span><br><span class="line">    items=&quot;Collection&quot;</span><br><span class="line">    varStatus=&quot;StatusName&quot;</span><br><span class="line">    begin=&quot;begin&quot;</span><br><span class="line">    end=&quot;end&quot;</span><br><span class="line">    step=&quot;step&quot;&gt;</span><br><span class="line">    本体内容</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&amp;lt;c:out value&amp;#x3D;””要显示的数据对象&amp;gt;&lt;br&gt;&amp;lt;c:out value&amp;#x3D;”字符串”&amp;gt;&lt;br&gt;&amp;lt;c:out value&amp;#x3D;”EL表达式”&amp;gt;&lt;/p&gt;
&lt;h1 id=&quot;EL表达式&quot;&gt;&lt;a href=&quot;#EL</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>web课堂笔记4.26</title>
    <link href="http://example.com/2022/04/26/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B04-26/"/>
    <id>http://example.com/2022/04/26/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B04-26/</id>
    <published>2022-04-26T00:13:58.000Z</published>
    <updated>2022-05-25T08:01:31.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><p>脚本：&lt;%!Java代码%&gt;存在线程安全问题，不建议使用<br>注释：</p><ul><li>&lt;%—-%&gt;只能在源码中看到，更安全</li><li>html注释和java注释能在网页中显示</li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>page放在第一行</p><h2 id="JSP标签"><a href="#JSP标签" class="headerlink" title="JSP标签"></a>JSP标签</h2><h3 id="动态包含"><a href="#动态包含" class="headerlink" title="动态包含"></a>动态包含</h3><p>静态包含：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@include file=&quot;/include.jsp&quot;%&gt;</span><br></pre></td></tr></table></figure><p>动态包含：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=&quot;被包含的页面&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=&quot;要转发的资源&quot; /&gt;</span><br></pre></td></tr></table></figure><p>格式：<br>标签库名：标签库中具体标签</p><h2 id="sql外键"><a href="#sql外键" class="headerlink" title="sql外键"></a>sql外键</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FOREIGN KEY(parent_id) REFERENCES t_catalog(id))</span><br></pre></td></tr></table></figure><p>FOREIGN KEY(子类属性名) REFERENCES 父类表(父类属性名))</p><h2 id="购物车系统"><a href="#购物车系统" class="headerlink" title="购物车系统"></a>购物车系统</h2><h4 id="IndexServlet"><a href="#IndexServlet" class="headerlink" title="IndexServlet"></a>IndexServlet</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.chenge.servlet;</span><br><span class="line"></span><br><span class="line">import com.chenge.service.CatalogService;</span><br><span class="line">import com.chenge.bean.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import javax.servlet.annotation.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@WebServlet(name = &quot;IndexServlet&quot;, value = &quot;/index.jsp&quot;)</span><br><span class="line">public class IndexServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        CatalogService catalogService = new CatalogService();</span><br><span class="line">        List&lt;Catalog&gt; catalogList = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            catalogList = catalogService.getAllCatalogs();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        request.setAttribute(&quot;catalogList&quot;,catalogList);</span><br><span class="line">        request.getRequestDispatcher(&quot;WEB-INF/view/index.jsp&quot;).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package com.chenge.bean;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Catalog &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String catalogName;</span><br><span class="line">    private String catalogDesp;</span><br><span class="line">    private int parentId;</span><br><span class="line">    private List&lt;Catalog&gt; subCatalog = new ArrayList&lt;Catalog&gt;();</span><br><span class="line"></span><br><span class="line">    public Catalog() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public Catalog(int id, String catalogName, String desp, int parentId) &#123;</span><br><span class="line">        this.id=id;</span><br><span class="line">        this.catalogName=catalogName;</span><br><span class="line">        this.catalogDesp=desp;</span><br><span class="line">        this.parentId=parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCatalogName() &#123;</span><br><span class="line">        return catalogName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCatalogName(String catalogName) &#123;</span><br><span class="line">        this.catalogName = catalogName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCatalogDesp() &#123;</span><br><span class="line">        return catalogDesp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCatalogDesp(String catalogDesp) &#123;</span><br><span class="line">        this.catalogDesp = catalogDesp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getParentId() &#123;</span><br><span class="line">        return parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setParentId(int parentId) &#123;</span><br><span class="line">        this.parentId = parentId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;Catalog&gt; getSubCatalog() &#123;</span><br><span class="line">        return subCatalog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSubCatalog(List&lt;Catalog&gt; subCatalog) &#123;</span><br><span class="line">        this.subCatalog = subCatalog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CatalogService"><a href="#CatalogService" class="headerlink" title="CatalogService"></a>CatalogService</h4><p>拿到分类数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">package com.chenge.service;</span><br><span class="line"></span><br><span class="line">import com.chenge.bean.*;</span><br><span class="line">import com.chenge.utils.DBUtils;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class IndexService &#123;</span><br><span class="line">    public List&lt;Catalog&gt; getAllCatalogs() throws Exception &#123;</span><br><span class="line">        Connection conn = DBUtils.getConnection();</span><br><span class="line">        PreparedStatement pstm = conn.prepareStatement(&quot;select * from t_catalog order by parent_id desc,id desc&quot;);</span><br><span class="line">        ResultSet resultSet = pstm.executeQuery();</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer,Catalog&gt; catalogMap = new HashMap&lt;Integer,Catalog&gt;();</span><br><span class="line"></span><br><span class="line">        while(resultSet.next()) &#123;</span><br><span class="line">            int id = resultSet.getInt(&quot;id&quot;);</span><br><span class="line">            String catalogName = resultSet.getString(&quot;catalog_name&quot;);</span><br><span class="line">            String desp = resultSet.getString(&quot;desp&quot;);</span><br><span class="line">            int parentId = resultSet.getInt(&quot;parent_id&quot;);</span><br><span class="line"></span><br><span class="line">            Catalog catalog = new Catalog(id, catalogName, desp, parentId);</span><br><span class="line"></span><br><span class="line">            if (parentId == 0) &#123;</span><br><span class="line">                //顶级分类</span><br><span class="line">                Catalog catalog1 = catalogMap.get(id);</span><br><span class="line"></span><br><span class="line">                if(catalog1 != null)&#123;</span><br><span class="line">                    catalog.setSubCatalog(catalog1.getSubCatalog());</span><br><span class="line">                    catalogMap.put(id,catalog);</span><br><span class="line">                &#125;else &#123;</span><br><span class="line">                    //没有人以此作为父级分类</span><br><span class="line">                    catalogMap.put(id,catalog);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                //子分类</span><br><span class="line">                //寻找父级是否在map中</span><br><span class="line">                Catalog parentCatalog = catalogMap.get(parentId);</span><br><span class="line">                if (parentCatalog == null) &#123;</span><br><span class="line">                    parentCatalog = new Catalog();</span><br><span class="line">                    List&lt;Catalog&gt; subCatalog = parentCatalog.getSubCatalog();</span><br><span class="line">                    subCatalog.add(catalog);</span><br><span class="line">                    catalogMap.put(parentId, parentCatalog);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    parentCatalog.getSubCatalog().add(catalog);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Catalog catalog1 = catalogMap.get(id);</span><br><span class="line">                if (catalog1 != null) &#123;</span><br><span class="line">                    catalog.setSubCatalog(catalog1.getSubCatalog());</span><br><span class="line">                    catalogMap.remove(id);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //将map中所有顶级分类，形成列表</span><br><span class="line">        List&lt;Catalog&gt; catalogList = new ArrayList&lt;Catalog&gt;();</span><br><span class="line">        Set&lt;Integer&gt; keySet = catalogMap.keySet();</span><br><span class="line">        for(Integer key : keySet)&#123;</span><br><span class="line">            Catalog catalog = catalogMap.get(key);</span><br><span class="line">            catalogList.add(catalog);</span><br><span class="line">        &#125;</span><br><span class="line">        return catalogList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>div.快速补全属性</p><h4 id="Index-jsp"><a href="#Index-jsp" class="headerlink" title="Index.jsp"></a>Index.jsp</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;com.chenge.bean.Catalog&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.util.List&quot; %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: vanilla</span><br><span class="line">  Date: 15/3/2022</span><br><span class="line">  Time: 上午9:13</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;static/css/style.css&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;h1&gt;</span><br><span class="line">          Vanilla电商平台</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        &lt;a href=&quot;login.jsp&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;regist.jsp&quot;&gt;注册&lt;/a&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line"></span><br><span class="line">    &lt;section class=&quot;content&quot;&gt;</span><br><span class="line">      &lt;aside&gt;</span><br><span class="line">        &lt;!--此处显示分类列表--&gt;</span><br><span class="line">&lt;%--        &lt;ul&gt;--%&gt;</span><br><span class="line">&lt;%--          &lt;li&gt;--%&gt;</span><br><span class="line">&lt;%--            &lt;a href=&quot;&quot;&gt;酒水&lt;/a&gt;--%&gt;</span><br><span class="line">&lt;%--            &lt;ul&gt;--%&gt;</span><br><span class="line">&lt;%--              &lt;li&gt;&lt;a href=&#x27;&#x27;&gt;红酒&lt;/a&gt;&lt;/li&gt;--%&gt;</span><br><span class="line">&lt;%--              &lt;li&gt;&lt;a href=&#x27;&#x27;&gt;白酒&lt;/a&gt;&lt;/li&gt;--%&gt;</span><br><span class="line">&lt;%--              &lt;li&gt;&lt;a href=&#x27;&#x27;&gt;啤酒&lt;/a&gt;&lt;/li&gt;--%&gt;</span><br><span class="line">&lt;%--            &lt;/ul&gt;--%&gt;</span><br><span class="line">&lt;%--          &lt;/li&gt;--%&gt;</span><br><span class="line">&lt;%--        &lt;/ul&gt;--%&gt;</span><br><span class="line"></span><br><span class="line">        &lt;%</span><br><span class="line">          List&lt;Catalog&gt; catalogList = (List&lt;Catalog&gt;)request.getAttribute(&quot;catalogList&quot;);</span><br><span class="line">          if(catalogList!=null)&#123;</span><br><span class="line">            out.write(&quot;&lt;ul&gt;&quot;);</span><br><span class="line">            for(Catalog catalog:catalogList)&#123;</span><br><span class="line">              out.write(&quot;&lt;li&gt;&lt;a href=&#x27;&#x27;&gt;&quot;+catalog.getCatalogName()+&quot;&lt;/a&gt;&quot;);</span><br><span class="line">              List&lt;Catalog&gt; subCatalogList = catalog.getSubCatalog();</span><br><span class="line"></span><br><span class="line">              if(subCatalogList.size()&gt;0)&#123;</span><br><span class="line">                out.write(&quot;&lt;ul&gt;&quot;);</span><br><span class="line">                for(Catalog subCatalog:subCatalogList)&#123;</span><br><span class="line">                  out.write(&quot;&lt;li&gt;&lt;a href=&#x27;&#x27;&gt;&quot;+subCatalog.getCatalogName()+&quot;&lt;/a&gt;&lt;/li&gt;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(&quot;&lt;/ul&gt;&quot;);</span><br><span class="line">              &#125;</span><br><span class="line">              out.write(&quot;&lt;/li&gt;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(&quot;&lt;/ul&gt;&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">        %&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/aside&gt;</span><br><span class="line">      &lt;main&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/main&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        Copyright©沈阳师范大学软件工程陈舸</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h2&gt;&lt;p&gt;脚本：&amp;lt;%!Java代码%&amp;gt;存在线程安全问题，不建议使用&lt;br&gt;注释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;%—-%&amp;gt</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>4.24机器</title>
    <link href="http://example.com/2022/04/24/4-24%E6%9C%BA%E5%99%A8/"/>
    <id>http://example.com/2022/04/24/4-24%E6%9C%BA%E5%99%A8/</id>
    <published>2022-04-24T05:18:55.000Z</published>
    <updated>2022-04-24T05:18:55.752Z</updated>
    
    <content type="html"><![CDATA[<script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;https://unpkg.com/kity@2.0.4/dist/kity.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;ht</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web课堂笔记4.12</title>
    <link href="http://example.com/2022/04/12/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B04-12/"/>
    <id>http://example.com/2022/04/12/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B04-12/</id>
    <published>2022-04-12T00:16:40.000Z</published>
    <updated>2022-05-25T08:01:54.119Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注册功能"><a href="#注册功能" class="headerlink" title="注册功能"></a>注册功能</h1><p><img src="https://s2.loli.net/2022/04/14/JkLBuX2Kbneip8E.png" alt="avatar"></p><p>1.验证手机短信是否正确(会话)</p><p>2.验证数据库是否已经存在该用户名</p><p>3.手机号、密码存到数据库，手机号当用户名</p><h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><p>地址栏不会变</p><h2 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h2><p>完全两个独立资源</p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><p>1.cookie不能存储中文</p><p>2.设置cookie在客户端的持久化时间</p><p>如果不设置持节花时间，cookie会在浏览器关闭时销毁</p><p>如果设置，cookie信息会持久化到浏览器磁盘文件中</p><p>cookie.setMaxAge(10*60);&#x2F;&#x2F;单位秒</p><p>3.设置cookie的携带路径</p><p>cookie.setPath(String path);</p><p>注意：父路径的页面是不能访问子路径和兄弟路径的cookie的</p><p>只有自己和父路径能访问</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;注册功能&quot;&gt;&lt;a href=&quot;#注册功能&quot; class=&quot;headerlink&quot; title=&quot;注册功能&quot;&gt;&lt;/a&gt;注册功能&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/04/14/JkLBuX2Kbneip8E.png&quot; </summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>天梯</title>
    <link href="http://example.com/2022/04/11/%E5%A4%A9%E6%A2%AF-1/"/>
    <id>http://example.com/2022/04/11/%E5%A4%A9%E6%A2%AF-1/</id>
    <published>2022-04-11T11:50:07.000Z</published>
    <updated>2022-04-21T12:30:42.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2017决赛"><a href="#2017决赛" class="headerlink" title="2017决赛"></a>2017决赛</h1><h2 id="L1-6-整除光棍"><a href="#L1-6-整除光棍" class="headerlink" title="L1-6 整除光棍"></a>L1-6 整除光棍</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.math.BigInteger;</span><br><span class="line">import java.util.*;</span><br><span class="line">public class Main&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner in=new Scanner(System.in);</span><br><span class="line">        BigInteger one=new BigInteger(&quot;1&quot;);</span><br><span class="line">        BigInteger chu;</span><br><span class="line">        chu=in.nextBigInteger();</span><br><span class="line">        int res=1;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            BigInteger ans=new BigInteger(&quot;0&quot;);</span><br><span class="line">            ans=one.divide(chu);</span><br><span class="line">            BigInteger zero=new BigInteger(&quot;0&quot;);</span><br><span class="line">            BigInteger mo=one.mod(chu);</span><br><span class="line">            if(!ans.equals(zero) &amp;&amp; mo.equals(zero))&#123;</span><br><span class="line">                System.out.println(ans+&quot; &quot;+res);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            res++;</span><br><span class="line">            BigInteger shi=new BigInteger(&quot;10&quot;);</span><br><span class="line">            one=one.multiply(shi);</span><br><span class="line">            BigInteger yi=new BigInteger(&quot;1&quot;);</span><br><span class="line">            one=one.add(yi);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>使用java的BigIntager类<br>方法：</p><ul><li>add：加</li><li>mod：取余</li><li>divide：除</li><li>multiply：乘<br>运算两者都是BigIntager类</li></ul><h2 id="L1-3-阅览室"><a href="#L1-3-阅览室" class="headerlink" title="L1-3 阅览室"></a>L1-3 阅览室</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct Book &#123;</span><br><span class="line">int s, e;</span><br><span class="line">int st, et;</span><br><span class="line">&#125;books[1010];</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">for (int i = 1;i &lt;= n;i++) &#123;</span><br><span class="line">int num = 0, time = 0;</span><br><span class="line">while (1) &#123;</span><br><span class="line">int id;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; id;</span><br><span class="line">char c;</span><br><span class="line">cin &gt;&gt; c;</span><br><span class="line">string s;</span><br><span class="line">getline(cin, s);</span><br><span class="line">//cout &lt;&lt; s[0] &lt;&lt; endl;</span><br><span class="line">int h = (s[1] - &#x27;0&#x27;) * 10 + (s[2] - &#x27;0&#x27;);</span><br><span class="line">int m = (s[4] - &#x27;0&#x27;) * 10 + (s[5] - &#x27;0&#x27;);</span><br><span class="line">if (id == 0) &#123;</span><br><span class="line">if (num != 0)time = round(time*1.0 / num);</span><br><span class="line">cout &lt;&lt; num &lt;&lt; &quot; &quot; &lt;&lt; time &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">if (c == &#x27;S&#x27;) &#123;</span><br><span class="line">books[id].st = h * 60 + m;</span><br><span class="line">books[id].s = i;</span><br><span class="line">books[id].e = i - 1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">if (books[id].s == i &amp;&amp; books[id].e != i) &#123;</span><br><span class="line">books[id].et = h * 60 + m;</span><br><span class="line">books[id].e = i;</span><br><span class="line">books[id].s--;</span><br><span class="line">num++;</span><br><span class="line">time += books[id].et - books[id].st;</span><br><span class="line">//cout &lt;&lt; num &lt;&lt; &quot; &quot; &lt;&lt; time &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>仔细读题，如果有连续两个s，取后者而不是前者</p><h1 id="2020决赛"><a href="#2020决赛" class="headerlink" title="2020决赛"></a>2020决赛</h1><h2 id="L2-4-彩虹瓶"><a href="#L2-4-彩虹瓶" class="headerlink" title="L2-4 彩虹瓶"></a>L2-4 彩虹瓶</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;stack&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n, m, k;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">while (k--) &#123;</span><br><span class="line">stack&lt;int&gt; jia;</span><br><span class="line">int flag = 1;</span><br><span class="line">int pos = 1;</span><br><span class="line">for (int i = 1;i &lt;= n;i++) &#123;</span><br><span class="line">int x;</span><br><span class="line">int is = 0;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">if (x != pos) &#123;</span><br><span class="line">jia.push(x);</span><br><span class="line">if (jia.size() &gt; m)flag = 0;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">pos++;</span><br><span class="line">while (!jia.empty() &amp;&amp; jia.top() == pos) &#123;</span><br><span class="line">pos++;</span><br><span class="line">jia.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int len = jia.size();</span><br><span class="line">for (int i = 0;i &lt; len;i++) &#123;</span><br><span class="line">if (jia.top() == pos) &#123;</span><br><span class="line">jia.pop();</span><br><span class="line">pos++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">if (!flag || !jia.empty() )cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>1.判断货架时要用while，如果正确可以一直取<br>2.定义stack放在while里面，避免上轮数据残留</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2017决赛&quot;&gt;&lt;a href=&quot;#2017决赛&quot; class=&quot;headerlink&quot; title=&quot;2017决赛&quot;&gt;&lt;/a&gt;2017决赛&lt;/h1&gt;&lt;h2 id=&quot;L1-6-整除光棍&quot;&gt;&lt;a href=&quot;#L1-6-整除光棍&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>爬虫4.11</title>
    <link href="http://example.com/2022/04/11/%E7%88%AC%E8%99%AB4-11/"/>
    <id>http://example.com/2022/04/11/%E7%88%AC%E8%99%AB4-11/</id>
    <published>2022-04-11T05:24:14.000Z</published>
    <updated>2022-04-11T06:27:23.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>请求头、response</p><h2 id="解析内容"><a href="#解析内容" class="headerlink" title="解析内容"></a>解析内容</h2><p>HTML、json等格式，可以用<strong>页面解析库、正则表达式</strong>等进行解析</p><h2 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h2><p>文本、数据库</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a><br><a href="https://movie.douban.com/top250?start=25">https://movie.douban.com/top250?start=25</a></p><p>25个一页</p><h3 id="快速定位源代码"><a href="#快速定位源代码" class="headerlink" title="快速定位源代码"></a>快速定位源代码</h3><p><img src="https://s2.loli.net/2022/04/11/gZfzmyvo4OAui2G.png" alt="avatar"></p><h3 id="html中标签的层次"><a href="#html中标签的层次" class="headerlink" title="html中标签的层次"></a>html中标签的层次</h3><p><img src="https://s2.loli.net/2022/04/11/c5mGLFA7iBYI4Hw.png" alt="avatar"></p><h4 id="必要参数"><a href="#必要参数" class="headerlink" title="必要参数"></a>必要参数</h4><h5 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h5><p>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;100.0.4896.75 Safari&#x2F;537.36<br><img src="https://s2.loli.net/2022/04/11/h2t9fnZyNKBJ8Ho.png" alt="avatar"></p><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p><img src="https://s2.loli.net/2022/04/11/aBvgdAzU97ufq4Y.png" alt="avatar"></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;获取数据&quot;&gt;&lt;a href=&quot;#获取数据&quot; class=&quot;headerlink&quot; title=&quot;获取数据&quot;&gt;&lt;/a&gt;获取数据&lt;/h2&gt;&lt;p&gt;请求头、response&lt;/p&gt;
&lt;h2 id=&quot;解析内容&quot;&gt;&lt;a href=&quot;#解析内容&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>机器学习4.5</title>
    <link href="http://example.com/2022/04/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A04-5/"/>
    <id>http://example.com/2022/04/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A04-5/</id>
    <published>2022-04-05T05:16:04.000Z</published>
    <updated>2022-04-19T08:15:25.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df=pd.read_csv(&#x27;D:/film.csv&#x27;)</span><br><span class="line">df.to_csv(&#x27;D:/data2.csv&#x27;,index=False,header=0,sep=&#x27;,&#x27;,encoding=&quot;utf-8&quot;)</span><br></pre></td></tr></table></figure><p>index决定有没有前面的序号<br>encoding决定编码</p><h2 id="数据写入excel"><a href="#数据写入excel" class="headerlink" title="数据写入excel"></a>数据写入excel</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_excel(&#x27;D:/data3.xlsx&#x27;,index=False,sheet_name=&#x27;电影数据&#x27;,encoding=&quot;utf-8&quot;)</span><br></pre></td></tr></table></figure><p>访问方法：<br>1.df[]数值<br>2.df[]列名<br>3.df.loc[]<br>4.df.iloc[]</p><p>使用列行名，切片时终值能取到<br>使用列名号，切片时终值取不到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(data[[&#x27;列1&#x27;]])#上面有列名，是DataFrame类型</span><br><span class="line">print(data[&#x27;列1&#x27;])#上面无列名，是series类型</span><br></pre></td></tr></table></figure><p>df[1:5][1:3]:先取1-5行，再在得到的新列表中，取1-3行</p><h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">x=np.arange(0,10,0.3)</span><br><span class="line">y=np.sin(x)</span><br><span class="line">fig=plt.figure()</span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;]=False</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;]=[&#x27;Fangsong&#x27;,&#x27;SimHei&#x27;,&#x27;Kaiti&#x27;]</span><br><span class="line"></span><br><span class="line">ax1=fig.add_axes([0.1,0.1,0.8,0.8])</span><br><span class="line">ax2=fig.add_axes([0.2,0.5,0.3,0.3])</span><br><span class="line">ax1.set_title(&#x27;正弦曲线&#x27;)</span><br><span class="line">ax1.plot(x,y,&#x27;g&#x27;)</span><br><span class="line">ax2.plot(x,y,&#x27;r&#x27;)</span><br><span class="line">plt.show</span><br></pre></td></tr></table></figure><h2 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">a=np.random.randint(0,10,10)</span><br><span class="line"></span><br><span class="line">plt.rcParams[&#x27;font.family&#x27;]=&#x27;FangSong&#x27;</span><br><span class="line">plt.plot(a,label=&#x27;第1条&#x27;,linestyle=&#x27;solid&#x27;,linewidth=4,color=&#x27;r&#x27;,marker=&#x27;*&#x27;)#solid直线-，dashed虚线- -，dotted点..,dashdot线点-.</span><br><span class="line">#marker连接点</span><br><span class="line">plt.legend([&#x27;1111&#x27;])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x=np.linspace(-10,10,100)</span><br><span class="line">y=np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;]=False</span><br><span class="line">plt.plot(x,y,marker=&#x27;o&#x27;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=np.random.randn(300)</span><br><span class="line">b=np.random.randn(300)</span><br><span class="line">plt.scatter(a,b,marker=&#x27;o&#x27;,s=80,c=&#x27;r&#x27;,linewidths=3,edgecolors=&#x27;y&#x27;,alpha=0.5)</span><br><span class="line">#marker点的样式，s点的大小,c颜色,linewidths边缘宽度，edgecolors边缘颜色,alpha透明度</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=np.random.randn(5)</span><br><span class="line">b=np.random.randn(5)</span><br><span class="line">colo=np.random.randint(0,2,5)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(colo)</span><br><span class="line">plt.scatter(a,b,marker=&#x27;o&#x27;,s=80,c=colo)</span><br><span class="line">#marker点的样式，s点的大小,c颜色,linewidths边缘宽度，edgecolors边缘颜色,alpha透明度</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a=np.random.randint(0,10,5)</span><br><span class="line">b=np.random.randint(0,10,5)</span><br><span class="line">colo=np.random.randint(0,3,5)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(colo)</span><br><span class="line">plt.scatter(a,b,marker=&#x27;o&#x27;,s=80,c=colo)</span><br><span class="line">#marker点的样式，s点的大小,c颜色,linewidths边缘宽度，edgecolors边缘颜色,alpha透明度</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="网络散布矩阵"><a href="#网络散布矩阵" class="headerlink" title="网络散布矩阵"></a>网络散布矩阵</h2><p>import pandas as pd<br>import numpy as np<br>import matplotlib.pyplot as plt<br>data&#x3D;pd.DataFrame(np.random.randint(0,100,(100,4)),<br>                  columns&#x3D;list(‘abcd’))#[‘a’,’b’,’c’,’d’]<br>colo&#x3D;np.random.randint(0,2,100)<br>pd.plotting.scatter_matrix(data,c&#x3D;colo,s&#x3D;130,figsize&#x3D;(15,13))<br>data.head()</p><h2 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=np.random.randint(2,20,5)</span><br><span class="line">print(a)</span><br><span class="line">plt.hist(a,color=&#x27;r&#x27;,orientation=&#x27;horizontal&#x27;)</span><br><span class="line"># 颜色 方向 </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(1,21,2)</span><br><span class="line">print(a)</span><br><span class="line">height=np.random.randint(0,100,10)</span><br><span class="line">plt.bar(a,height,width=1.5,color=&#x27;b&#x27;)</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写数据&quot;&gt;&lt;a href=&quot;#写数据&quot; class=&quot;headerlink&quot; title=&quot;写数据&quot;&gt;&lt;/a&gt;写数据&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web课堂笔记4.5</title>
    <link href="http://example.com/2022/04/05/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B04-5/"/>
    <id>http://example.com/2022/04/05/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B04-5/</id>
    <published>2022-04-05T00:15:22.000Z</published>
    <updated>2022-05-25T08:02:02.574Z</updated>
    
    <content type="html"><![CDATA[<p>重定向：两个无关资源之间的跳转<br>跳转与业务无关页面通常用重定向</p><p>跳转同业务页面用请求重定向</p><p>重名路径会报错</p><p>MVC:<br>浏览器请求—-&gt;servlet—-&gt;view<br>servlet的value和view同名</p><p>get请求返回view<br>post请求返回servlet</p><p>如果返回类型，浏览器不支持直接打开，就会下载</p><p>在网址后面加?fileName&#x3D;…<br>传入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        String fileName = request.getParameter(&quot;fileName&quot;);</span><br><span class="line">        String path = request.getServletContext().getRealPath(&quot;/WEB-INF/upload/&quot; + fileName);</span><br><span class="line">        FileInputStream fio=null;</span><br><span class="line">        try&#123;</span><br><span class="line">            fio=new FileInputStream(path);//文件输入流</span><br><span class="line">            byte[] buffer = new byte[1024];</span><br><span class="line">            int len = 0;</span><br><span class="line">            len = fio.read(buffer);</span><br><span class="line"></span><br><span class="line">            response.setContentType(&quot;multipart/form-data&quot;);//让浏览器自己判断类型</span><br><span class="line">            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;fileName=&quot; + fileName);</span><br><span class="line">            //response.setContentType(&quot;image/jpeg&quot;);//response返回类型</span><br><span class="line">            OutputStream out = response.getOutputStream();</span><br><span class="line">            while (len &gt; 0) &#123;</span><br><span class="line">                out.write(buffer, 0, len);</span><br><span class="line">                len = fio.read(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            Msg msg=new Msg();</span><br><span class="line">            msg.setInfo(&quot;访问的文件路径不正确，请返回&lt;a href=&#x27;index.jsp&#x27;&gt;首页&lt;/a&gt;&quot;);</span><br><span class="line">            request.setAttribute(&quot;msg&quot;,msg);</span><br><span class="line">            request.getRequestDispatcher(&quot;WEB-INF/view/info.jsp&quot;).forward(request,response);</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            fio.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;重定向：两个无关资源之间的跳转&lt;br&gt;跳转与业务无关页面通常用重定向&lt;/p&gt;
&lt;p&gt;跳转同业务页面用请求重定向&lt;/p&gt;
&lt;p&gt;重名路径会报错&lt;/p&gt;
&lt;p&gt;MVC:&lt;br&gt;浏览器请求—-&amp;gt;servlet—-&amp;gt;view&lt;br&gt;servlet的value和view同</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基础3.29</title>
    <link href="http://example.com/2022/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%803-29/"/>
    <id>http://example.com/2022/03/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%803-29/</id>
    <published>2022-03-29T05:11:23.000Z</published>
    <updated>2022-03-30T08:44:52.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h1><p>相同维度四则运算，同位置计算<br>不同维度，扩展成相同尺寸数组计算</p><p>1横0纵</p><h1 id="Numpy读取外部文件"><a href="#Numpy读取外部文件" class="headerlink" title="Numpy读取外部文件"></a>Numpy读取外部文件</h1><p>data &#x3D; np.loadtxt(‘f:&#x2F;data&#x2F;1.txt&#x2F;,delimiter&#x3D;’,’,skiprows&#x3D;’1’)</p><h1 id="使用Numpy处理图像"><a href="#使用Numpy处理图像" class="headerlink" title="使用Numpy处理图像"></a>使用Numpy处理图像</h1><h2 id="使用skimage库"><a href="#使用skimage库" class="headerlink" title="使用skimage库"></a>使用skimage库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from skimage import data</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">image=data.coffee()</span><br><span class="line">fig=plt.figure(figsize=(8,6),dpi=100)</span><br><span class="line">fig.add_subplot(221),plt.axis(&#x27;off&#x27;),plt.imshow(image)</span><br><span class="line">fig.add_subplot(222),plt.axis(&#x27;off&#x27;),plt.imshow(image[:,:,0],cmap=&#x27;gray&#x27;)#[行，列，通道]</span><br><span class="line">fig.add_subplot(223),plt.axis(&#x27;off&#x27;),plt.imshow(image[:,:,1],cmap=&#x27;gray&#x27;)#通道：0，1，2对应R,G,B</span><br><span class="line">fig.add_subplot(224),plt.axis(&#x27;off&#x27;),plt.imshow(image[:,:,2],cmap=&#x27;gray&#x27;)</span><br></pre></td></tr></table></figure><p>灰度图—&gt;伪彩色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from skimage import data,io</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">image=data.coffee()</span><br><span class="line">image_r=image[:,:,0]</span><br><span class="line">image_g=image[:,:,1]</span><br><span class="line">image_b=image[:,:,2]</span><br><span class="line">image_brg=np.zeros(image.shape,dtype=np.int32)</span><br><span class="line">image_rbg=np.zeros(image.shape,dtype=np.int32)</span><br><span class="line">image_gbr=np.zeros(image.shape,dtype=np.int32)</span><br><span class="line">image_brg[:,:,0]=image_b</span><br><span class="line">image_brg[:,:,1]=image_r</span><br><span class="line">image_brg[:,:,2]=image_g</span><br><span class="line">image_rbg[:,:,0]=image_r</span><br><span class="line">image_rbg[:,:,1]=image_b</span><br><span class="line">image_rbg[:,:,2]=image_g</span><br><span class="line">image_gbr[:,:,0]=image_g</span><br><span class="line">image_gbr[:,:,1]=image_b</span><br><span class="line">image_gbr[:,:,2]=image_r</span><br><span class="line">fig=plt.figure(figsize=(8,6),dpi=100)</span><br><span class="line">fig.add_subplot(221),plt.axis(&#x27;off&#x27;),plt.imshow(image)</span><br><span class="line">fig.add_subplot(222),plt.axis(&#x27;off&#x27;),plt.imshow(image_brg)</span><br><span class="line">fig.add_subplot(223),plt.axis(&#x27;off&#x27;),plt.imshow(image_rbg)</span><br><span class="line">fig.add_subplot(224),plt.axis(&#x27;off&#x27;),plt.imshow(image_gbr)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as np</span><br><span class="line">arr1=np.random.randint(0,255,(100,100,3))#生成100行，100列，rgb三维的0-255数值</span><br><span class="line">arr2=arr1.astype(np.uint8)</span><br><span class="line">Image.fromarray(arr2).show()</span><br></pre></td></tr></table></figure><p>真彩色：三维<br>伪彩色：二维<br>假彩色：一维</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=np.random.randint(0,255,(50,50))</span><br><span class="line">b=np.random.randint(0,255,(50,50,3))#真彩色</span><br><span class="line">fig=plt.figure(figsize=(8,4),dpi=100)</span><br><span class="line">fig.add_subplot(121),plt.axis(&#x27;off&#x27;),plt.imshow(a)</span><br><span class="line">fig.add_subplot(122),plt.axis(&#x27;off&#x27;),plt.imshow(b)</span><br></pre></td></tr></table></figure><h1 id="numpy-科学计算"><a href="#numpy-科学计算" class="headerlink" title="numpy  科学计算"></a>numpy  科学计算</h1><h1 id="pandas-数据分析"><a href="#pandas-数据分析" class="headerlink" title="pandas 数据分析"></a>pandas 数据分析</h1><h1 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h1><h2 id="3种数据结构"><a href="#3种数据结构" class="headerlink" title="3种数据结构"></a>3种数据结构</h2><p>1.Panel：三维数组<br>2.DataFrame：二维数组<br>3.Series：一维数组</p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><ul><li>类似c的map，包含索引和数据两部分</li><li>.index .values</li><li>pd.Series(data(值、列表、一维数组、一维字典),index(默认为0),dtype)</li><li>可以用索引和切片访问</li></ul><h4 id="两种访问方法："><a href="#两种访问方法：" class="headerlink" title="两种访问方法："></a>两种访问方法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">list1=[5,6,7,8]</span><br><span class="line">s=pd.Series(list1,index=[&#x27;张某&#x27;,&#x27;李某&#x27; ,&#x27;王某&#x27;,&#x27;赵某&#x27;])</span><br><span class="line">print(s[&#x27;李某&#x27;])</span><br><span class="line">print(s[1])</span><br></pre></td></tr></table></figure><h4 id="指定下标范围："><a href="#指定下标范围：" class="headerlink" title="指定下标范围："></a>指定下标范围：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s=pd.Series([1,2,3,4],index=range(4,8))</span><br></pre></td></tr></table></figure><h4 id="使用字典创建："><a href="#使用字典创建：" class="headerlink" title="使用字典创建："></a>使用字典创建：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1=&#123;&#x27;张三&#x27;:30,&#x27;李四&#x27;:40&#125;</span><br><span class="line">s=pd.Series(dict1)</span><br></pre></td></tr></table></figure><h4 id="使用一维数组创建："><a href="#使用一维数组创建：" class="headerlink" title="使用一维数组创建："></a>使用一维数组创建：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr1=np.arange(1,4)</span><br><span class="line">s=pd.Series(arr1)</span><br><span class="line">s1=pd.Series(arr1,index=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;])</span><br></pre></td></tr></table></figure><h4 id="三种方式访问："><a href="#三种方式访问：" class="headerlink" title="三种方式访问："></a>三种方式访问：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(s1.loc[&#x27;a&#x27;:&#x27;c&#x27;])</span><br><span class="line">print(s1[&#x27;a&#x27;:&#x27;c&#x27;])</span><br><span class="line">print(s1.iloc[0:3])</span><br><span class="line">s.iloc[0:3]</span><br></pre></td></tr></table></figure><h4 id="罗列不连续的"><a href="#罗列不连续的" class="headerlink" title="罗列不连续的:"></a>罗列不连续的:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s[[3,5]]</span><br><span class="line">s[[&#x27;b&#x27;,&#x27;f&#x27;]]</span><br></pre></td></tr></table></figure><p>s.head(n)获取从头开始数的n个，没有参数默认5个<br>s.tail(n)获取从尾开始数的n个，没有参数默认5个</p><h4 id="得到元素个数："><a href="#得到元素个数：" class="headerlink" title="得到元素个数："></a>得到元素个数：</h4><p>s.size<br>len(s)</p><h4 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h4><p>s[i]&#x3D;n</p><h5 id="修改多个："><a href="#修改多个：" class="headerlink" title="修改多个："></a>修改多个：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.loc[[&#x27;b&#x27;,&#x27;f&#x27;]]=18</span><br><span class="line">s.loc[[&#x27;b&#x27;,&#x27;f&#x27;]]=[18,28]</span><br></pre></td></tr></table></figure><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p>s[没有的新索引]&#x3D;n</p><h4 id="存在是修改，不存在是增加"><a href="#存在是修改，不存在是增加" class="headerlink" title="存在是修改，不存在是增加"></a>存在是修改，不存在是增加</h4><h4 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h4><p>判断对象是value，不是index</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s[s%2==0]</span><br></pre></td></tr></table></figure><p>b    18<br>d     4<br>f    28<br>h     8<br>x    48<br>dtype: int64</p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>drop(a,b)<br>a索引<br>b true或false，是否在原Series删除<br>若是false，返回一个新Series对象</p><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><p>s1.append(s2)<br>把s2拼接到s1后面</p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>包含带索引的多列数据，表格<br>各列数据类型可以不同<br>index行索引，column列索引(表格字段名)</p><p>pd.DataFrame(data,index,colums,dtype,copy)</p><h4 id="字典键值对应列索引"><a href="#字典键值对应列索引" class="headerlink" title="字典键值对应列索引"></a>字典键值对应列索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">dict1=&#123;&#x27;col1&#x27;:[1,2,3,4],&#x27;col2&#x27;:[5,6,7,8]&#125;</span><br><span class="line">df1=pd.DataFrame(dict1)</span><br><span class="line">df1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    col1col2</span><br><span class="line">015</span><br><span class="line">126</span><br><span class="line">237</span><br><span class="line">348</span><br></pre></td></tr></table></figure><p>index默认0123</p><h4 id="指定index"><a href="#指定index" class="headerlink" title="指定index"></a>指定index</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">dict1=&#123;&#x27;col1&#x27;:[1,2,3,4],&#x27;col2&#x27;:[5,6,7,8]&#125;</span><br><span class="line">df1=pd.DataFrame(dict1,index=range(8,12))</span><br><span class="line">df1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">col1col2</span><br><span class="line">815</span><br><span class="line">926</span><br><span class="line">1037</span><br><span class="line">1148</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">dict1=&#123;&#x27;col1&#x27;:[1,2,3,4],&#x27;col2&#x27;:[5,6,7,8]&#125;</span><br><span class="line">df1=pd.DataFrame(dict1,index=[&#x27;行1&#x27;,&#x27;行2&#x27;,&#x27;行3&#x27;,&#x27;行4&#x27;])</span><br><span class="line">df1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">col1col2</span><br><span class="line">行115</span><br><span class="line">行226</span><br><span class="line">行337</span><br><span class="line">行448</span><br></pre></td></tr></table></figure><h2 id="从外部读取文件"><a href="#从外部读取文件" class="headerlink" title="从外部读取文件"></a>从外部读取文件</h2><p>python—-open<br>numpy—-loadtxt<br>pandas—-read_csv,read_excel</p><p>read_csv(filepath, sep&#x3D;,header&#x3D;,names&#x3D;,index_col)<br>header，names设置表头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">df=pd.read_csv(&quot;d:/film.csv&quot;,names=[&#x27;上映时间&#x27;,&#x27;片名&#x27;,&#x27;票房&#x27;])#names指定列名</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p>得到一列信息：df[‘列名’]<br>得到一行信息：df.iloc[行号]</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;广播&quot;&gt;&lt;a href=&quot;#广播&quot; class=&quot;headerlink&quot; title=&quot;广播&quot;&gt;&lt;/a&gt;广播&lt;/h1&gt;&lt;p&gt;相同维度四则运算，同位置计算&lt;br&gt;不同维度，扩展成相同尺寸数组计算&lt;/p&gt;
&lt;p&gt;1横0纵&lt;/p&gt;
&lt;h1 id=&quot;Numpy读取外部文件</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web课堂笔记3.29</title>
    <link href="http://example.com/2022/03/29/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B03-29/"/>
    <id>http://example.com/2022/03/29/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B03-29/</id>
    <published>2022-03-29T00:17:06.000Z</published>
    <updated>2022-05-25T08:02:08.147Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream is = DBUtils.class.getClassLoader().getResourceAsStream(&quot;db.properties&quot;);</span><br></pre></td></tr></table></figure><p>从src下面找文件</p><p>shift+tab 减少缩进<br>ctrl+alt+L 代码格式化<br>ctrl+shift+T 快速创建当前方法的测试类<br>ctrl+N 快速查找类</p><p>在url里加 allowMultiQueries参数设置为true<br>则可以用分号隔开，执行多条sql语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletContext context1 = this.getServletConfig().getServletContext();//法二</span><br></pre></td></tr></table></figure><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>model 数据模型<br>view 试图<br>controller</p><ul><li>MVC是基于请求转发</li><li>重定向是实现简单跳转</li></ul><h2 id="乱码解决"><a href="#乱码解决" class="headerlink" title="乱码解决"></a>乱码解决</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(&quot;text/html;charset=utf-8&quot;);//读取</span><br><span class="line">            response.setCharacterEncoding(&quot;utf-8&quot;);//响应</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setCharacterEncoding(&quot;utf-8&quot;);</span><br></pre></td></tr></table></figure><h1 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h1><h2 id="注意路径"><a href="#注意路径" class="headerlink" title="注意路径"></a>注意路径</h2><p>不打反斜杠，表示和当前工程同一个路径<br>打了则不是当前工程下，直接是localhost：8080下了</p><h2 id="重定向传参"><a href="#重定向传参" class="headerlink" title="重定向传参"></a>重定向传参</h2><p>servlet:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(&quot;failure.jsp?msg=&quot;+msg.getInfo());</span><br></pre></td></tr></table></figure><p>jsp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">            String msg = request.getParameter(&quot;msg&quot;);//获取传入的参数</span><br><span class="line">            out.write(&quot;msg&quot;);</span><br><span class="line">        %&gt;</span><br></pre></td></tr></table></figure><p>response不能解决重定向传参乱码，只能解决正文的乱码问题</p><h2 id="解决重定向参数乱码问题"><a href="#解决重定向参数乱码问题" class="headerlink" title="解决重定向参数乱码问题"></a>解决重定向参数乱码问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s=msg.getInfo();</span><br><span class="line">s= URLEncoder.encode(s,&quot;utf-8&quot;);</span><br><span class="line">response.sendRedirect(&quot;failure.jsp?msg=&quot;+s);</span><br></pre></td></tr></table></figure><p>URLEncoder.encode(字符串变量名，字符编码)</p><p>简化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(&quot;failure.jsp?msg=&quot;+URLEncoder.encode(msg.getInfo(),&quot;utf-8&quot;));</span><br></pre></td></tr></table></figure><h2 id="获取上下文路径"><a href="#获取上下文路径" class="headerlink" title="获取上下文路径"></a>获取上下文路径</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(request.getContextPath()+&quot;/&quot;+&quot;success.jsp&quot;);</span><br></pre></td></tr></table></figure><h1 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h1><p>可以传request和response</p><p>servlet:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.setAttribute(&quot;msg&quot;,msg);</span><br><span class="line">        RequestDispatcher rd = request.getRequestDispatcher(&quot;info.jsp&quot;);</span><br><span class="line">        rd.forward(request,response);</span><br></pre></td></tr></table></figure><p>jsp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">            Msg msg = (Msg)request.getAttribute(&quot;msg&quot;);</span><br><span class="line">            response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">            if(msg.getCode()==0)&#123;</span><br><span class="line">                out.write(&quot;恭喜你，登陆成功，请跳转到&lt;a href=&#x27;index.jsp&#x27;&gt;首页&lt;/a&gt;&quot;);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                out.write(&quot;对不起，&quot;+msg.getInfo()+&quot;登陆失败，请&lt;a href=&#x27;login.jsp&#x27;&gt;重新登陆&lt;/a&gt;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        %&gt;</span><br></pre></td></tr></table></figure><h2 id="view"><a href="#view" class="headerlink" title="view"></a>view</h2><p>在web-inf下新建一个view文件夹，把请求转发的页面放在view里，这样用户就不能直接访问这些页面了<br>路径要改成完整路径才能访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestDispatcher rd = request.getRequestDispatcher(&quot;/WEB-INF/view/info.jsp&quot;);</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>web课堂笔记3.26</title>
    <link href="http://example.com/2022/03/26/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B03-26/"/>
    <id>http://example.com/2022/03/26/web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B03-26/</id>
    <published>2022-03-26T02:11:11.000Z</published>
    <updated>2022-05-25T08:02:17.299Z</updated>
    
    <content type="html"><![CDATA[<p>Servlet多用于接受请求，返回响应<br>实际业务处理封装到service里，防止servlet代码过于臃肿</p><p>null没有方法，所以.equals前面不能是null</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Servlet多用于接受请求，返回响应&lt;br&gt;实际业务处理封装到service里，防止servlet代码过于臃肿&lt;/p&gt;
&lt;p&gt;null没有方法，所以.equals前面不能是null&lt;/p&gt;
&lt;script type=&quot;text&amp;#x2F;javascript&quot; src=&quot;</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基础3.22</title>
    <link href="http://example.com/2022/03/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%803-22/"/>
    <id>http://example.com/2022/03/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%803-22/</id>
    <published>2022-03-22T05:15:57.000Z</published>
    <updated>2022-03-23T14:36:29.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组合ndarray"><a href="#组合ndarray" class="headerlink" title="组合ndarray"></a>组合ndarray</h1><ul><li>两种方向的组合：水平、垂直</li><li>横向组合函数：hstack((data1,data2))、column_stack((data1,dara2))，组合的是属性，要求相同的行数</li><li>纵向组合函数：vstack((data1,data2))、row_stack((data1,dara2))，组合的是纪律，要求相同的属性（列数）</li><li>参数是1个元组，需要组合的数组为元组的元素</li><li>要求合并的各数组要有相同的行数</li></ul><h2 id="水平横向组合"><a href="#水平横向组合" class="headerlink" title="水平横向组合"></a>水平横向组合</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr1=np.arange(12).reshape(3,-1)</span><br><span class="line">arr2=np.linspace(1,15,15).reshape(3,-1)</span><br><span class="line">print(&#x27;arr1:\n&#x27;,arr1)</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">print(&#x27;arr2:\n&#x27;,arr2)</span><br><span class="line">arr3=np.hstack((arr1,arr2))</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">print(&#x27;arr3:\n&#x27;,arr3)</span><br><span class="line">arr4=np.column_stack((arr1,arr2))</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">print(&#x27;arr4:\n&#x27;,arr4)</span><br></pre></td></tr></table></figure><p>arr1:<br> [[ 0  1  2  3]<br> [ 4  5  6  7]<br> [ 8  9 10 11]]<br>-——————-<br>arr2:<br> [[ 1.  2.  3.  4.  5.]<br> [ 6.  7.  8.  9. 10.]<br> [11. 12. 13. 14. 15.]]<br>-——————-<br>arr3:<br> [[ 0.  1.  2.  3.  1.  2.  3.  4.  5.]<br> [ 4.  5.  6.  7.  6.  7.  8.  9. 10.]<br> [ 8.  9. 10. 11. 11. 12. 13. 14. 15.]]<br>-——————-<br>arr4:<br> [[ 0.  1.  2.  3.  1.  2.  3.  4.  5.]<br> [ 4.  5.  6.  7.  6.  7.  8.  9. 10.]<br> [ 8.  9. 10. 11. 11. 12. 13. 14. 15.]]</p><h2 id="纵向组合"><a href="#纵向组合" class="headerlink" title="纵向组合"></a>纵向组合</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr1=np.arange(12).reshape(-1,3)</span><br><span class="line">arr2=np.linspace(1,15,15).reshape(-1,3)</span><br><span class="line">print(&#x27;arr1:\n&#x27;,arr1)</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">print(&#x27;arr2:\n&#x27;,arr2)</span><br><span class="line">arr3=np.vstack((arr1,arr2))</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">print(&#x27;arr3:\n&#x27;,arr3)</span><br><span class="line">arr4=np.row_stack((arr1,arr2))</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">print(&#x27;arr4:\n&#x27;,arr4)</span><br></pre></td></tr></table></figure><p>arr1:<br> [[ 0  1  2]<br> [ 3  4  5]<br> [ 6  7  8]<br> [ 9 10 11]]<br>-——————-<br>arr2:<br> [[ 1.  2.  3.]<br> [ 4.  5.  6.]<br> [ 7.  8.  9.]<br> [10. 11. 12.]<br> [13. 14. 15.]]<br>-——————-<br>arr3:<br> [[ 0.  1.  2.]<br> [ 3.  4.  5.]<br> [ 6.  7.  8.]<br> [ 9. 10. 11.]<br> [ 1.  2.  3.]<br> [ 4.  5.  6.]<br> [ 7.  8.  9.]<br> [10. 11. 12.]<br> [13. 14. 15.]]<br>-——————-<br>arr4:<br> [[ 0.  1.  2.]<br> [ 3.  4.  5.]<br> [ 6.  7.  8.]<br> [ 9. 10. 11.]<br> [ 1.  2.  3.]<br> [ 4.  5.  6.]<br> [ 7.  8.  9.]<br> [10. 11. 12.]<br> [13. 14. 15.]]</p><h2 id="横向组合和纵向组合concatenate-data1-data2-axis-x3D-0-x2F-1-多了一个参数，决定横向纵向"><a href="#横向组合和纵向组合concatenate-data1-data2-axis-x3D-0-x2F-1-多了一个参数，决定横向纵向" class="headerlink" title="横向组合和纵向组合concatenate((data1,data2),axis&#x3D;0&#x2F;1)多了一个参数，决定横向纵向"></a>横向组合和纵向组合concatenate((data1,data2),axis&#x3D;0&#x2F;1)多了一个参数，决定横向纵向</h2><p>0轴垂直纵向组合、1轴水平横向组合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr4=np.concatenate((arr1,arr2),axis=0)</span><br></pre></td></tr></table></figure><h1 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h1><ul><li>hsplit水平分割</li><li>vsplit垂直分割</li><li>split（同样多了一个参数axis）</li><li>分割后维度与原来相同</li></ul><h2 id="横向分割hsplit-函数"><a href="#横向分割hsplit-函数" class="headerlink" title="横向分割hsplit()函数"></a>横向分割hsplit()函数</h2><ul><li>分割的得到的是多个数组组成的元组，可以拆包成单个数组</li><li>参数类型有2中，一种是单个数，表示平均拆成多少个数组，另一种是元组,元组的元素是列的下标值</li><li>列数要能被n整除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr2=np.linspace(1,18,18).reshape(3,-1)</span><br><span class="line">print(&#x27;arr2:\n&#x27;,arr2)</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">arr3=np.hsplit(arr2,3)#平均分成3个</span><br><span class="line">print(&#x27;arr3:\n&#x27;,arr3)</span><br></pre></td></tr></table></figure><p>arr2:<br> [[ 1.  2.  3.  4.  5.  6.]<br> [ 7.  8.  9. 10. 11. 12.]<br> [13. 14. 15. 16. 17. 18.]]<br>-——————-<br>arr3:<br> [array([[ 1.,  2.],<br>       [ 7.,  8.],<br>       [13., 14.]]), array([[ 3.,  4.],<br>       [ 9., 10.],<br>       [15., 16.]]), array([[ 5.,  6.],<br>       [11., 12.],<br>       [17., 18.]])]</p><p>指定位置分割：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr2=np.linspace(1,18,18).reshape(3,-1)</span><br><span class="line">print(&#x27;arr2:\n&#x27;,arr2)</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">arr3=np.hsplit(arr2,(1,4))</span><br><span class="line">print(&#x27;arr3:\n&#x27;,arr3)</span><br></pre></td></tr></table></figure><p>arr2:<br> [[ 1.  2.  3.  4.  5.  6.]<br> [ 7.  8.  9. 10. 11. 12.]<br> [13. 14. 15. 16. 17. 18.]]<br>-——————-<br>arr3:<br> [array([[ 1.],<br>       [ 7.],<br>       [13.]]), array([[ 2.,  3.,  4.],<br>       [ 8.,  9., 10.],<br>       [14., 15., 16.]]), array([[ 5.,  6.],<br>       [11., 12.],<br>       [17., 18.]])]</p><p>ctrl+？键，快速注释那行，也可以选中多行操作，再次操作是取消注释</p><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="最大最小值"><a href="#最大最小值" class="headerlink" title="最大最小值"></a>最大最小值</h2><p>argmax(array,axis&#x3D;不指定&#x2F;0&#x2F;1)<br>argmin(array,axis&#x3D;不指定&#x2F;0&#x2F;1)<br>找出各行或各列最大最小值返回数组，元素是索引</p><p>不写axis默认按行</p><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><p>where(condition,x,y)<br>1.只有condition{判断条件}，无x，y，直接给出判断结果，各元素是否满足判断条件<br>2.输出满足条件的下标数组或元组<br>3.x,y分别是满足condition的返回值，和不满足的返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr2=np.linspace(1,18,18).reshape(-1,3)</span><br><span class="line">print(arr2)</span><br><span class="line">print(np.where(arr2%2==0))</span><br><span class="line">arr3,arr4=np.where(arr2%2==0)</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">print(arr3)</span><br><span class="line">print(arr4)</span><br><span class="line">print(&#x27;-&#x27;*20)</span><br><span class="line">print(arr2%2==0)#boolean</span><br><span class="line">print(arr2[arr2%2==0])#满足的元素</span><br></pre></td></tr></table></figure><p>[[ 1.  2.  3.]<br> [ 4.  5.  6.]<br> [ 7.  8.  9.]<br> [10. 11. 12.]<br> [13. 14. 15.]<br> [16. 17. 18.]]<br>(array([0, 1, 1, 2, 3, 3, 4, 5, 5], dtype&#x3D;int64), array([1, 0, 2, 1, 0, 2, 1, 0, 2], dtype&#x3D;int64))<br>-——————-<br>[0 1 1 2 3 3 4 5 5]<br>[1 0 2 1 0 2 1 0 2]<br>-——————-<br>[[False  True False]<br> [ True False  True]<br> [False  True False]<br> [ True False  True]<br> [False  True False]<br> [ True False  True]]<br>[ 2.  4.  6.  8. 10. 12. 14. 16. 18.]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr1=np.arange(12).reshape(3,-1)</span><br><span class="line">print(&#x27;原数组:\n&#x27;,arr1)</span><br><span class="line">print(&#x27;——&#x27;*20)</span><br><span class="line">arr2=np.where(arr1%2==0)</span><br><span class="line">print(arr2)#两个数组，行号，列号</span><br></pre></td></tr></table></figure><p>原数组:<br> [[ 0  1  2  3]<br> [ 4  5  6  7]<br> [ 8  9 10 11]]<br>————————————————————————————————————————<br>(array([0, 0, 1, 1, 2, 2], dtype&#x3D;int64), array([0, 2, 0, 2, 0, 2], dtype&#x3D;int64))</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr1=np.arange(12).reshape(3,-1)</span><br><span class="line">print(&#x27;原数组:\n&#x27;,arr1)</span><br><span class="line">print(&#x27;——&#x27;*20)</span><br><span class="line">arr2=np.where(arr1%2==0,1,0)</span><br><span class="line">print(arr2)</span><br></pre></td></tr></table></figure><p>原数组:<br> [[ 0  1  2  3]<br> [ 4  5  6  7]<br> [ 8  9 10 11]]<br>————————————————————————————————————————<br>[[1 0 1 0]<br> [1 0 1 0]<br> [1 0 1 0]]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr1=np.arange(12).reshape(3,-1)</span><br><span class="line">arr2=np.arange(12,24).reshape(3,-1)</span><br><span class="line">arr3=np.arange(25,37).reshape(3,-1)</span><br><span class="line">print(&#x27;原数组:\n&#x27;,arr1)</span><br><span class="line">print(&#x27;——&#x27;*20)</span><br><span class="line">print(&#x27;原数组:\n&#x27;,arr2)</span><br><span class="line">print(&#x27;——&#x27;*20)</span><br><span class="line">print(&#x27;原数组:\n&#x27;,arr3)</span><br><span class="line">print(&#x27;——&#x27;*20)</span><br><span class="line">arr2=np.where(arr1&gt;3,arr2,arr3)</span><br><span class="line">print(arr2)</span><br></pre></td></tr></table></figure><p>原数组:<br> [[ 0  1  2  3]<br> [ 4  5  6  7]<br> [ 8  9 10 11]]<br>————————————————————————————————————————<br>原数组:<br> [[12 13 14 15]<br> [16 17 18 19]<br> [20 21 22 23]]<br>————————————————————————————————————————<br>原数组:<br> [[25 26 27 28]<br> [29 30 31 32]<br> [33 34 35 36]]<br>————————————————————————————————————————<br>[[25 26 27 28]<br> [16 17 18 19]<br> [20 21 22 23]]</p><h1 id="extract-condition-arr1-arr2"><a href="#extract-condition-arr1-arr2" class="headerlink" title="extract(condition(arr1),arr2)"></a>extract(condition(arr1),arr2)</h1><p>找数组二元素，位置是数组一满足相应条件的位置</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;组合ndarray&quot;&gt;&lt;a href=&quot;#组合ndarray&quot; class=&quot;headerlink&quot; title=&quot;组合ndarray&quot;&gt;&lt;/a&gt;组合ndarray&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;两种方向的组合：水平、垂直&lt;/li&gt;
&lt;li&gt;横向组合函数：hstack</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>web笔记3.22</title>
    <link href="http://example.com/2022/03/22/web%E7%AC%94%E8%AE%B03-22/"/>
    <id>http://example.com/2022/03/22/web%E7%AC%94%E8%AE%B03-22/</id>
    <published>2022-03-22T00:23:22.000Z</published>
    <updated>2022-05-25T08:02:31.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类名首字母大写，servlet驼峰式"><a href="#类名首字母大写，servlet驼峰式" class="headerlink" title="类名首字母大写，servlet驼峰式"></a>类名首字母大写，servlet驼峰式</h1><h2 id="cmd命令"><a href="#cmd命令" class="headerlink" title="cmd命令"></a>cmd命令</h2><p>show database：显示所有数据库<br>use 数据库名：使用该数据库<br>show 数据库：显示所有表</p><p>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mall?characterEncoding&#x3D;utf8&amp; useSSL&#x3D;false&amp; serverTimezone&#x3D;UTC<br>协议:&#x2F;&#x2F;服务器地址：端口&#x2F;资源路径?参数1&#x3D;值&amp;参数2&#x3D;值<br>用户名密码可以放在url参数里，也可以放在Connection参数里</p><h2 id="两个必要的参数"><a href="#两个必要的参数" class="headerlink" title="两个必要的参数"></a>两个必要的参数</h2><p>useSSL是否使用加密连接<br>serverTimezone服务器的时区</p><p><img src="https://s2.loli.net/2022/03/22/nqdgzJWT3RsL9PC.png" alt="avatar"></p><p>在mqsql官网下可以下jar包</p><p>psvm回车，快速创建main方法</p><h2 id="获取当前时间，指定格式"><a href="#获取当前时间，指定格式" class="headerlink" title="获取当前时间，指定格式"></a>获取当前时间，指定格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf=new SimpleDateFormat(&quot;YYYY-MM-DD HH:mm:ss&quot;);</span><br><span class="line">String s = sdf.format(calendar.getTime());</span><br></pre></td></tr></table></figure><p>区别：<br>大写H24小时，小写h12小时<br>大写M月，小写m分钟<br>小写d是日</p><h2 id="下载jar包网址"><a href="#下载jar包网址" class="headerlink" title="下载jar包网址"></a>下载jar包网址</h2><p><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.chenge.ecommerce.test;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Calendar;</span><br><span class="line"></span><br><span class="line">public class DBTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public  void Test() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        String url=&quot;jdbc:mysql://localhost:3306/ecommerce?characterEncoding=utf8&amp; useSSL=false&amp; serverTimezone=UTC&quot;;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url, &quot;root&quot;, &quot;xyxcgchenge&quot;);</span><br><span class="line">        String sql=&quot;insert into t_login(login_name,password,last_login_ip,last_login_time) values(?,?,?,?)&quot;;//预编译的语句，直接用问号即可，不用加单引号</span><br><span class="line">        PreparedStatement pstm = conn.prepareStatement(sql);</span><br><span class="line">        pstm.setString(1,&quot;xiaoming&quot;);//第一个参数，给第几个参数传值</span><br><span class="line">        pstm.setString(2,&quot;123456&quot;);</span><br><span class="line">        pstm.setString(3,&quot;127.0.0.0&quot;);</span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        SimpleDateFormat sdf=new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        String s = sdf.format(calendar.getTime());</span><br><span class="line">        pstm.setString(4,s);</span><br><span class="line">        pstm.execute();</span><br><span class="line">        pstm.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.chenge.ecommerce.test;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Calendar;</span><br><span class="line"></span><br><span class="line">public class DBTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public  void Test() throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        String url=&quot;jdbc:mysql://localhost:3306/ecommerce?characterEncoding=utf8&amp; useSSL=false&amp; serverTimezone=UTC&quot;;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url, &quot;root&quot;, &quot;xyxcgchenge&quot;);</span><br><span class="line">        String sql=&quot;select * from t_login where login_name=? and password=?&quot;;//预编译的语句，直接用问号即可，不用加单引号</span><br><span class="line">        PreparedStatement pstm = conn.prepareStatement(sql);</span><br><span class="line">        pstm.setString(1,&quot;xiaoming&quot;);//第一个参数，给第几个参数传值</span><br><span class="line">        pstm.setString(2,&quot;123456&quot;);</span><br><span class="line">        ResultSet res = pstm.executeQuery();//ResultSet结果集，最开始指向第一条记录之前，每执行一次next，指向下一条记录，所以用.next()遍历</span><br><span class="line">        while(res.next())&#123;</span><br><span class="line">            int id = res.getInt(&quot;id&quot;);</span><br><span class="line">            String name = res.getString(&quot;login_name&quot;);</span><br><span class="line">            String ip = res.getString(&quot;last_login_ip&quot;);</span><br><span class="line">            String time = res.getString(&quot;last_login_time&quot;);</span><br><span class="line">            int status = res.getInt(&quot;status&quot;);</span><br><span class="line">            System.out.println(id+&quot; &quot;+name+&quot; &quot;+id+&quot; &quot;+time+&quot; &quot;+(status==0?&quot;正常&quot;:&quot;冻结&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">        res.close();</span><br><span class="line">        pstm.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;类名首字母大写，servlet驼峰式&quot;&gt;&lt;a href=&quot;#类名首字母大写，servlet驼峰式&quot; class=&quot;headerlink&quot; title=&quot;类名首字母大写，servlet驼峰式&quot;&gt;&lt;/a&gt;类名首字母大写，servlet驼峰式&lt;/h1&gt;&lt;h2 id=&quot;c</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>过滤器Filter</title>
    <link href="http://example.com/2022/03/21/%E8%BF%87%E6%BB%A4%E5%99%A8Filter/"/>
    <id>http://example.com/2022/03/21/%E8%BF%87%E6%BB%A4%E5%99%A8Filter/</id>
    <published>2022-03-21T10:22:50.000Z</published>
    <updated>2022-05-25T08:02:24.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="过滤器概述"><a href="#过滤器概述" class="headerlink" title="过滤器概述"></a>过滤器概述</h1><h2 id="什么是过滤器"><a href="#什么是过滤器" class="headerlink" title="什么是过滤器"></a>什么是过滤器</h2><p>Filter也称之为过滤器，是JAVA WEB中一门十分实用地技术，通过Filter可以对web资源进行控制和管理，例如可以对Jsp，Servlet等进行拦截。</p><h2 id="Filter规律其运行流程"><a href="#Filter规律其运行流程" class="headerlink" title="Filter规律其运行流程"></a>Filter规律其运行流程</h2><p>优先于servlet以及jsp之前运行<br>这样可以在servlet以及jsp之前做出响应：通过或者拦截<br><img src="https://s2.loli.net/2022/03/21/kZiSQNRT193wyrg.png" alt="avatar"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>可以实现URL级别地权限访问控制、过滤敏感词等</p><h1 id="创建一个过滤器"><a href="#创建一个过滤器" class="headerlink" title="创建一个过滤器"></a>创建一个过滤器</h1><blockquote class="pullquote mindmap mindmap-md"><ul><li>编写一个Filter<ul><li>实现Filter接口</li><li>实现其中的主要方法</li><li>配置web.xml</li></ul></li></ul></blockquote><p>Filter类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class ChengeFilter implements Filter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">        System.out.println(&quot;拦截成功&quot;);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);//放行servlet</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;chenge&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;net.chenge.filter.ChengeFilter&lt;/filter-class&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;chenge&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p>因为url-pattern写的是&#x2F;*，所以所有页面都会被拦截</p><h3 id="快捷方法：右键new————-gt-filter"><a href="#快捷方法：右键new————-gt-filter" class="headerlink" title="快捷方法：右键new————&gt;filter"></a>快捷方法：右键new————&gt;filter</h3><h1 id="Filter生命周期和API"><a href="#Filter生命周期和API" class="headerlink" title="Filter生命周期和API"></a>Filter生命周期和API</h1><p>Filter何时创建：服务器启动时就创建该Filter对象<br>Filter何时销毁：服务器关闭时Filter销毁</p><p>在web.xml里配置初始化信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;param&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;value&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br></pre></td></tr></table></figure><p>就可以在Filter类中用getInitParameter()获取这些信息</p><h3 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        String filterName = filterConfig.getFilterName();</span><br><span class="line">        String initParameter = filterConfig.getInitParameter(&quot;param&quot;);</span><br><span class="line">        ServletContext servletContext = filterConfig.getServletContext();//拿到servletcontext对象，说明servletcontext是在filter初始化之前初始化的</span><br><span class="line">        System.out.println(filterName);</span><br><span class="line">        System.out.println(initParameter);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="FilterChain"><a href="#FilterChain" class="headerlink" title="FilterChain"></a>FilterChain</h3><p>过滤器链对象，通过该对象的doFilter方法可以<strong>放行</strong>该请求–<strong>经常使用</strong>，当有多个过滤器的时候doFilter方法会将请求发送给下一个过滤器，直至发送给对应额servlet或者jsp处理</p><p>在使用中一般就操作doFilter方法，其他了解即可</p><h1 id="Filter基本配置"><a href="#Filter基本配置" class="headerlink" title="Filter基本配置"></a>Filter基本配置</h1><h2 id="url-pattern配置"><a href="#url-pattern配置" class="headerlink" title="url-pattern配置"></a>url-pattern配置</h2><ul><li>以”&#x2F;“字符开头，并以”&#x2F;<em>“结尾的字符串用于路径映射。例如：&#x2F;net&#x2F;chenge&#x2F;</em></li><li>以”<em>.”开头的字符串被用于扩展名映射，例如:</em>.jsp对所有jsp文件拦截</li><li>空字符串(“”)是用于指定精确映射应用程序 context root 的URL模式，例如从<a href="http://www.baidu.com/%E6%9D%A5%E7%9A%84%E8%AF%B7%E6%B1%82%E3%80%82">http://www.baidu.com/来的请求。</a></li><li>字符串中仅有”&#x2F;“字符时，表示应用程序”默认”的servlet。在这种情况下servlet路径是请求URL去掉context路径，且路径信息为null。<br>一、二种比较常用</li></ul><h2 id="dispatcher配置"><a href="#dispatcher配置" class="headerlink" title="dispatcher配置"></a>dispatcher配置</h2><p>以哪种方式访问的时候会触发过滤器</p><ul><li>REQUEST:默认值，代表直接访问某个资源时执行filter</li><li>FORWARD:转发时才执行filter</li><li>INCLUDE:包含资源时执行filter</li><li>ERROR:发生错误时，进行跳转时执行filter</li><li>ASYNC:异步servlet的时候需要使用</li></ul><h2 id="注解方式配置"><a href="#注解方式配置" class="headerlink" title="注解方式配置"></a>注解方式配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@WebFilter(filterName = &quot;chenge&quot;,urlPatterns = &quot;url-pattern配置&quot;,dispatcherTypes = DispatcherType.dispatcher配置)</span><br></pre></td></tr></table></figure><h1 id="案例：解决中文输出乱码问题"><a href="#案例：解决中文输出乱码问题" class="headerlink" title="案例：解决中文输出乱码问题"></a>案例：解决中文输出乱码问题</h1><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>我们在学习过程中发现乱码问题比较常见，比如我们通过response.getWriter().writer()方法输出汉字的时候必须设置setContentType()，那如果开发过程中每个servlet都要书写这个就很麻烦。<br>因此我们通过Filter过滤器，将所有输入和输出的内容都设置一次编码方式，这样就方便地解决了乱码问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.filter;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebFilter(filterName = &quot;CharsetFilter&quot;,dispatcherTypes = DispatcherType.REQUEST,urlPatterns = &quot;/*&quot;,initParams = &#123;@WebInitParam(name=&quot;encoding&quot;,value = &quot;text/html;charset=utf-8&quot;)&#125;)</span><br><span class="line">public class CharsetFilter implements Filter &#123;</span><br><span class="line"></span><br><span class="line">    private String encoding;</span><br><span class="line"></span><br><span class="line">    public void init(FilterConfig config) throws ServletException &#123;</span><br><span class="line">        encoding = config.getInitParameter(&quot;encoding&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException &#123;</span><br><span class="line">        if(encoding!=null)&#123;</span><br><span class="line">            response.setContentType(encoding);</span><br><span class="line">            chain.doFilter(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;过滤器概述&quot;&gt;&lt;a href=&quot;#过滤器概述&quot; class=&quot;headerlink&quot; title=&quot;过滤器概述&quot;&gt;&lt;/a&gt;过滤器概述&lt;/h1&gt;&lt;h2 id=&quot;什么是过滤器&quot;&gt;&lt;a href=&quot;#什么是过滤器&quot; class=&quot;headerlink&quot; title=&quot;什</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫1</title>
    <link href="http://example.com/2022/03/21/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB1/"/>
    <id>http://example.com/2022/03/21/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB1/</id>
    <published>2022-03-21T05:35:55.000Z</published>
    <updated>2022-03-21T06:40:44.228Z</updated>
    
    <content type="html"><![CDATA[<p>常用数据结构：<strong>字符串、列表</strong>、元组<br>文件的相关操作</p><h3 id="豆瓣top250"><a href="#豆瓣top250" class="headerlink" title="豆瓣top250"></a>豆瓣top250</h3><p>Urllib库、requests库<br>解析内容方法BeautifulSoup、正则表达式、Xpath</p><h3 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h3><p>txt、excel、SQLite</p><p>利用Cookies的模拟登录豆瓣数据爬取</p><h3 id="网络爬虫Web-Spider"><a href="#网络爬虫Web-Spider" class="headerlink" title="网络爬虫Web Spider"></a>网络爬虫Web Spider</h3><p>按照一定规则，自动的抓取互联网中信息的程序或脚本。<br>由于互联网数据的多样性和资源的有限性，根据用户需求定向抓取相关网页并分析已成为如今主流的爬取策略。<br><img src="https://s2.loli.net/2022/03/21/4gGICYbnkXLxZlW.png" alt="avatar"></p><h4 id="爬虫的本质"><a href="#爬虫的本质" class="headerlink" title="爬虫的本质"></a>爬虫的本质</h4><p>模拟浏览器打开网页，获取网页中我们需要的部分数据</p><p>爬虫可以爬通过浏览器访问的数据（图片、文字、视频等）<br>举例：天眼查、电影天堂、豆瓣</p><p>需要数据为人工智能算法提供样本，样本的数据量的大小、数据的真实性、数据的丰富性，直接影响了这些算法的精确度</p><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><ul><li>准备工作<ul><li>通过网页浏览html结构</li></ul></li><li>获取数据<ul><li>通过http库想目标站点发起请求，请求可以包含额外的header等信息<br>  如果服务器能正常响应，会得到一个response，便是所要获取的页面内容</li></ul></li><li>得到的内容HTML等格式，用<strong>页面解析库、正则表达式</strong>等进行解析</li><li>保存数据（sqlite、 MySQL、Redis、MongoDB）</li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常用数据结构：&lt;strong&gt;字符串、列表&lt;/strong&gt;、元组&lt;br&gt;文件的相关操作&lt;/p&gt;
&lt;h3 id=&quot;豆瓣top250&quot;&gt;&lt;a href=&quot;#豆瓣top250&quot; class=&quot;headerlink&quot; title=&quot;豆瓣top250&quot;&gt;&lt;/a&gt;豆瓣top250&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>监听器Listener</title>
    <link href="http://example.com/2022/03/20/%E7%9B%91%E5%90%AC%E5%99%A8Listener/"/>
    <id>http://example.com/2022/03/20/%E7%9B%91%E5%90%AC%E5%99%A8Listener/</id>
    <published>2022-03-20T12:38:38.000Z</published>
    <updated>2022-03-21T10:22:30.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="监听器概述"><a href="#监听器概述" class="headerlink" title="监听器概述"></a>监听器概述</h1><p>在Java Web中监听器指的是对这个web环境的监听，当被监听的对象发生变化时，可以执行相应的方法进行处理<br>监听器在开发中常见的场景：手机变成，前端编程</p><h3 id="监听器的相关概念"><a href="#监听器的相关概念" class="headerlink" title="监听器的相关概念"></a>监听器的相关概念</h3><p>事件源：被监听的对象<br>监听源：被监听的对象<br>注册监听器：将监听器与事件源进行绑定<br>响应行为：监听器听到事件源的状态变化时，所设计的功能代码</p><h2 id="监听器分来"><a href="#监听器分来" class="headerlink" title="监听器分来"></a>监听器分来</h2><h3 id="第一类：按照被监听的对象划分"><a href="#第一类：按照被监听的对象划分" class="headerlink" title="第一类：按照被监听的对象划分"></a>第一类：按照被监听的对象划分</h3><p>ServletContext域、ServletRequest域、HttpSession域</p><h3 id="第二类：监听的内容划分"><a href="#第二类：监听的内容划分" class="headerlink" title="第二类：监听的内容划分"></a>第二类：监听的内容划分</h3><p>监听域对象的创建与销毁的监听域对象的属性变化</p><table><thead><tr><th></th><th>ServletContext域</th><th>HttpSession域</th><th>ServletRequest域</th></tr></thead><tbody><tr><td>域对象的创建与销毁</td><td>ServletContextListener</td><td>HttpSessionListener</td><td>ServletRequestListener</td></tr><tr><td>域对象内的属性的变化</td><td>ServletContextAttributeListener</td><td>HttpSessionAttributeListener</td><td>ServletRequestAttributeListener</td></tr></tbody></table><h3 id="额外两个监听器"><a href="#额外两个监听器" class="headerlink" title="额外两个监听器"></a>额外两个监听器</h3><p>HttpSessionActivationListener<br>HttpSessionBindingListener</p><h1 id="创建ServletContextListener"><a href="#创建ServletContextListener" class="headerlink" title="创建ServletContextListener"></a>创建ServletContextListener</h1><h2 id="原始方式创建"><a href="#原始方式创建" class="headerlink" title="原始方式创建"></a>原始方式创建</h2><p>监听类有两个方法：</p><ul><li>contextInitialized：初始化</li><li>contextDestroyed：销毁</li></ul><p>在web.xml中配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;net.chenge.ServletContextListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br></pre></td></tr></table></figure><p>无需绑定，因为整个web容器只有ServletContextListener一个对象</p><h2 id="另一种常用创建方式"><a href="#另一种常用创建方式" class="headerlink" title="另一种常用创建方式"></a>另一种常用创建方式</h2><p>直接右键包，new<br>这种方式有注解，无需配置web.xml</p><h1 id="HttpSessionListener和ServletRequestListener"><a href="#HttpSessionListener和ServletRequestListener" class="headerlink" title="HttpSessionListener和ServletRequestListener"></a>HttpSessionListener和ServletRequestListener</h1><h2 id="HttpsessionListener"><a href="#HttpsessionListener" class="headerlink" title="HttpsessionListener"></a>HttpsessionListener</h2><p>监听Httpsession域的的创建与销毁的监听器HttpSessionListener</p><h3 id="HttpSession对象的生命周期"><a href="#HttpSession对象的生命周期" class="headerlink" title="HttpSession对象的生命周期"></a>HttpSession对象的生命周期</h3><p>创建：第一次调用request.getSession时创建<br>销毁：服务器关闭销毁 session过期 手动销毁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.ServletContextListener;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import javax.servlet.annotation.*;</span><br><span class="line"></span><br><span class="line">@WebListener</span><br><span class="line">public class HttpSessionListener implements javax.servlet.http.HttpSessionListener&#123;</span><br><span class="line"></span><br><span class="line">    public HttpSessionListener() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sessionCreated(HttpSessionEvent se) &#123;</span><br><span class="line">        /* Session is created. */</span><br><span class="line">        System.out.println(se.getSession().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sessionDestroyed(HttpSessionEvent se) &#123;</span><br><span class="line">        /* Session is destroyed. */</span><br><span class="line">        System.out.println(&quot;session销毁&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h2><p>监听ServletRequest域创建与销毁的监听器ServletRequestListener</p><h3 id="ServletRequest的生命周期"><a href="#ServletRequest的生命周期" class="headerlink" title="ServletRequest的生命周期"></a>ServletRequest的生命周期</h3><p>创建：每一次请求都会创建request<br>销毁：请求结束</p><p>用的较少，默认不会自带</p><h1 id="域对象监听器"><a href="#域对象监听器" class="headerlink" title="域对象监听器"></a>域对象监听器</h1><p>ServletContextAttributeListener监听器<br>HttpSessionAttributeListener监听器<br>ServletRequestAttributeListener监听器<br>监听三大域对象的属性变化的</p><h2 id="域对象的通用的方法"><a href="#域对象的通用的方法" class="headerlink" title="域对象的通用的方法"></a>域对象的通用的方法</h2><p>setAttribute(name,value)</p><ul><li>触发添加属性的监听器的方法</li><li>触发修改属性的监听器的方法<br>getAttribute(name)</li><li>查询操作不会触发监听器<br>removeAttribute(name)</li><li>触发删除属性的监听器的方法</li></ul><h2 id="ServletContextAttributeListener"><a href="#ServletContextAttributeListener" class="headerlink" title="ServletContextAttributeListener"></a>ServletContextAttributeListener</h2><p>三个方法：</p><ul><li>attributeAdded：属性添加时触发</li><li>attributeRemoved：属性删除时触发</li><li>attributeReplaced：属性修改时触发</li></ul><p>在class前面要加上注解：@WebListener 才会生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContextAttributeEvent;</span><br><span class="line">import javax.servlet.ServletContextAttributeListener;</span><br><span class="line">import javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line">@WebListener</span><br><span class="line">public class ContextAttributeListener implements ServletContextAttributeListener &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void attributeAdded(ServletContextAttributeEvent servletContextAttributeEvent) &#123;</span><br><span class="line">        System.out.println(&quot;属性被添加&quot;);</span><br><span class="line">        System.out.println(servletContextAttributeEvent.getName());//获取属性名称</span><br><span class="line">        System.out.println(servletContextAttributeEvent.getValue());//获取属性值</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeRemoved(ServletContextAttributeEvent servletContextAttributeEvent) &#123;</span><br><span class="line">        System.out.println(&quot;属性被删除&quot;);</span><br><span class="line">        System.out.println(servletContextAttributeEvent.getName());//获取属性名称</span><br><span class="line">        System.out.println(servletContextAttributeEvent.getValue());//获取属性值</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void attributeReplaced(ServletContextAttributeEvent servletContextAttributeEvent) &#123;</span><br><span class="line">        System.out.println(&quot;属性被修改&quot;);</span><br><span class="line">        //会打印修改前的值</span><br><span class="line">        System.out.println(servletContextAttributeEvent.getName());//获取属性名称</span><br><span class="line">        System.out.println(servletContextAttributeEvent.getValue());//获取属性值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import javax.servlet.annotation.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet(name = &quot;TestAttributeListenerServlet&quot;, value = &quot;/Test&quot;)</span><br><span class="line">public class TestAttributeListenerServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext servletContext=request.getServletContext();</span><br><span class="line">        servletContext.setAttribute(&quot;name&quot;,&quot;zhangsan&quot;);//添加</span><br><span class="line">        servletContext.setAttribute(&quot;name&quot;,&quot;lisi&quot;);//修改</span><br><span class="line">        servletContext.removeAttribute(&quot;name&quot;);//删除</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象感知监听器"><a href="#对象感知监听器" class="headerlink" title="对象感知监听器"></a>对象感知监听器</h1><p>与session中的绑定的对象相关的监听器(对象感知监听器)<br>HttpSessionBindingListener</p><ul><li>绑定状态valueBound：就是一个对象被放到session域中-setAttribute()</li><li>解绑状态valueUnbound：就是这个对象从session域中移除了-removeAttribute()<br>HttpSessionActivationListener</li><li>钝化状态：是将session内存中的对象持久化(序列化)到磁盘</li><li>活化状态：就是将磁盘上的对象再次恢复到session内存中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.bean;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpSessionAttributeListener;</span><br><span class="line">import javax.servlet.http.HttpSessionBindingEvent;</span><br><span class="line">import javax.servlet.http.HttpSessionBindingListener;</span><br><span class="line"></span><br><span class="line">public class User implements HttpSessionBindingListener &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public int getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(int id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void valueBound(HttpSessionBindingEvent httpSessionBindingEvent) &#123;</span><br><span class="line">        System.out.println(&quot;对象被绑定了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void valueUnbound(HttpSessionBindingEvent httpSessionBindingEvent) &#123;</span><br><span class="line">        System.out.println(&quot;对象被解除绑定了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Servlet代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        User user=new User();</span><br><span class="line">        user.setId(1);</span><br><span class="line">        user.setName(&quot;xiaoming&quot;);</span><br><span class="line">        session.setAttribute(&quot;user&quot;,user);</span><br><span class="line">        session.removeAttribute(&quot;user&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="案例：商品促销活动推广"><a href="#案例：商品促销活动推广" class="headerlink" title="案例：商品促销活动推广"></a>案例：商品促销活动推广</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>根据运营需求，双十一晚上24：00准备对商品进行调价促销，数码类产品减100元销售，日用品减10元销售，打着前先在原价基础上增加10%，要求技术部门在前三天将相关折扣信息推送给用户。</p><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><p>可使用java中的timer定时器类，设置一个定时器，在双十一前三天查询数据库，计算相关商品信息并发送给用户。<br>定时器的启动可以通过ServletContextListener监听器来完成，当服务器启动的时候调用定时器。<br>实际开发过程中会采用第三方的短信或者是手机推送方式发送给用户，我们为了演示方便会将信息打印在控制台</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><p>1.首先导包，以及数据库连接地相关配置信息<br>2.创建监听器<br>3.编写定时器<br>4.完成相关代码逻辑编写</p><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p><img src="https://s2.loli.net/2022/03/21/MB97QIwCXWvzGkH.png" alt="avatar"><br>右键add as library</p><p>ProListener监听类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.promotion;</span><br><span class="line"></span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line">import net.chenge.bean.Product;</span><br><span class="line">import org.apache.commons.dbutils.QueryRunner;</span><br><span class="line">import org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"></span><br><span class="line">import javax.management.Query;</span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import javax.servlet.annotation.*;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Timer;</span><br><span class="line">import java.util.TimerTask;</span><br><span class="line"></span><br><span class="line">@WebListener</span><br><span class="line">public class ProListener implements ServletContextListener &#123;</span><br><span class="line"></span><br><span class="line">    public ProListener() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextInitialized(ServletContextEvent sce) &#123;</span><br><span class="line">        Timer timer=new Timer();</span><br><span class="line">        timer.scheduleAtFixedRate(new TimerTask() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    ComboPooledDataSource comboPooledDataSource=new ComboPooledDataSource();</span><br><span class="line">                    QueryRunner queryRunner=new QueryRunner(comboPooledDataSource);</span><br><span class="line">                    String sql=&quot;select * from product&quot;;</span><br><span class="line">                    List&lt;Product&gt; productList = queryRunner.query(sql, new BeanListHandler&lt;Product&gt;(Product.class));</span><br><span class="line">                    if(productList!=null&amp;&amp;productList.size()&gt;0)&#123;</span><br><span class="line">                        for(Product product:productList)&#123;</span><br><span class="line">                            if(product.getC_id()==1)&#123;</span><br><span class="line">                                //数码产品</span><br><span class="line">                                String p_price = product.getP_price();</span><br><span class="line">                                int temp=Integer.parseInt(p_price);</span><br><span class="line">                                temp-=100;</span><br><span class="line">                                p_price=Integer.toString(temp);</span><br><span class="line">                                product.setP_price(p_price);</span><br><span class="line">                                System.out.println(product.getP_name()+&quot;现在打折促销啦！只需要：&quot;+product.getP_price());</span><br><span class="line">                            &#125;</span><br><span class="line">                            else &#123;</span><br><span class="line">                                //日用品</span><br><span class="line">                                //数码产品</span><br><span class="line">                                String p_price = product.getP_price();</span><br><span class="line">                                int temp=Integer.parseInt(p_price);</span><br><span class="line">                                temp-=10;</span><br><span class="line">                                p_price=Integer.toString(temp);</span><br><span class="line">                                product.setP_price(p_price);</span><br><span class="line">                                System.out.println(product.getP_name()+&quot;现在打折促销啦！只需要：&quot;+product.getP_price());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, new Date(), 1000*20);</span><br><span class="line">        /* This method is called when the servlet context is initialized(when the Web application is deployed). */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void contextDestroyed(ServletContextEvent sce) &#123;</span><br><span class="line">        /* This method is called when the servlet Context is undeployed or Application Server shuts down. */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Product商品信息类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.bean;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line">public class Product &#123;</span><br><span class="line">    private int p_id;</span><br><span class="line">    private String p_name;</span><br><span class="line">    private String p_price;</span><br><span class="line">    private String p_image;</span><br><span class="line">    private int c_id;</span><br><span class="line"></span><br><span class="line">    public Product() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getP_id() &#123;</span><br><span class="line">        return p_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setP_id(int p_id) &#123;</span><br><span class="line">        this.p_id = p_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getP_name() &#123;</span><br><span class="line">        return p_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setP_name(String p_name) &#123;</span><br><span class="line">        this.p_name = p_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getP_price() &#123;</span><br><span class="line">        return p_price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setP_price(String p_price) &#123;</span><br><span class="line">        this.p_price = p_price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getP_image() &#123;</span><br><span class="line">        return p_image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setP_image(String p_image) &#123;</span><br><span class="line">        this.p_image = p_image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getC_id() &#123;</span><br><span class="line">        return c_id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setC_id(int c_id) &#123;</span><br><span class="line">        this.c_id = c_id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>c3p0-config.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">    &lt;default-config&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot;&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/mall&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot;&gt;xyxcgchenge&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;maxStatements&quot;&gt;200&lt;/property&gt;</span><br><span class="line">    &lt;/default-config&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- This app is massive! --&gt;</span><br><span class="line">    &lt;named-config name=&quot;intergalactoApp&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;acquireIncrement&quot;&gt;50&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;initialPoolSize&quot;&gt;100&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;minPoolSize&quot;&gt;50&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;maxPoolSize&quot;&gt;1000&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- intergalactoApp adopts a different approach to configuring statement caching --&gt;</span><br><span class="line">        &lt;property name=&quot;maxStatements&quot;&gt;0&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;maxStatementsPerConnection&quot;&gt;5&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- he&#x27;s important, but there&#x27;s only one of him --&gt;</span><br><span class="line">        &lt;user-overrides user=&quot;master-of-the-universe&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;acquireIncrement&quot;&gt;1&lt;/property&gt;</span><br><span class="line">            &lt;property name=&quot;initialPoolSize&quot;&gt;1&lt;/property&gt;</span><br><span class="line">            &lt;property name=&quot;minPoolSize&quot;&gt;1&lt;/property&gt;</span><br><span class="line">            &lt;property name=&quot;maxPoolSize&quot;&gt;5&lt;/property&gt;</span><br><span class="line">            &lt;property name=&quot;maxStatementsPerConnection&quot;&gt;50&lt;/property&gt;</span><br><span class="line">        &lt;/user-overrides&gt;</span><br><span class="line">    &lt;/named-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure><p>快捷键：选中代码，alt+ctrl+t，try&#x2F;catch</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;监听器概述&quot;&gt;&lt;a href=&quot;#监听器概述&quot; class=&quot;headerlink&quot; title=&quot;监听器概述&quot;&gt;&lt;/a&gt;监听器概述&lt;/h1&gt;&lt;p&gt;在Java Web中监听器指的是对这个web环境的监听，当被监听的对象发生变化时，可以执行相应的方法进行处理&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JSTL标签库</title>
    <link href="http://example.com/2022/03/19/JSTL%E6%A0%87%E7%AD%BE%E5%BA%93/"/>
    <id>http://example.com/2022/03/19/JSTL%E6%A0%87%E7%AD%BE%E5%BA%93/</id>
    <published>2022-03-19T10:33:55.000Z</published>
    <updated>2022-05-25T08:02:38.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EL表达式获取域中数据"><a href="#EL表达式获取域中数据" class="headerlink" title="EL表达式获取域中数据"></a>EL表达式获取域中数据</h1><p>EL全名为Expression Language，它提供了在JSP中简化表达式的方法，让JSP的代码更加简化，可以嵌入在JSP页面内部，减少JSP脚本的编写</p><p>JSP脚本&lt;%&#x3D;request.getAttribute(name)%&gt;<br>EL表达式替代上面的脚本:${requestScope.name}<br>EL最主要的作用是获得四大域中的数据，格式 ${EL表达式}<br>    EL获得pageContext域中的值:${pageScope.key};<br>    EL获得request域中的值：${requestScope.key};<br>    EL获得session域中的值：${sessionScope.key};<br>    EL获得application域中的值：${applicationScope};<br>   <strong>EL从四个域中获得某个值$(key):</strong><br>    —同样是依次从pageContext域，request域，session域，application域中获取属性，在某个域中获取后将不在向后寻找</p><h2 id="通过脚本方式获得不同域的对象"><a href="#通过脚本方式获得不同域的对象" class="headerlink" title="通过脚本方式获得不同域的对象"></a>通过脚本方式获得不同域的对象</h2><p>el.jsp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page import=&quot;net.chenge.bean.User&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.util.List&quot; %&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: vanilla</span><br><span class="line">  Date: 19/3/2022</span><br><span class="line">  Time: 下午7:15</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    //request域中存了小明</span><br><span class="line">    request.setAttribute(&quot;name&quot;,&quot;小明&quot;);</span><br><span class="line">    //session域中存了一个User对象</span><br><span class="line">    User user=new User();</span><br><span class="line">    user.setName(&quot;小红&quot;);</span><br><span class="line">    user.setSex(&quot;女&quot;);</span><br><span class="line">    session.setAttribute(&quot;user&quot;,user);</span><br><span class="line">    //application域中存了list</span><br><span class="line">    List&lt;User&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line">    User user1 = new User();</span><br><span class="line">    user1.setName(&quot;小强&quot;);</span><br><span class="line">    user.setSex(&quot;男&quot;);</span><br><span class="line">    User user2 = new User();</span><br><span class="line">    user1.setName(&quot;小丽&quot;);</span><br><span class="line">    user.setSex(&quot;女&quot;);</span><br><span class="line">    list.add(user1);</span><br><span class="line">    list.add(user2);</span><br><span class="line">    application.setAttribute(&quot;list&quot;,list);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=request.getAttribute(&quot;name&quot;)%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    User user3 = (User)session.getAttribute(&quot;user&quot;);</span><br><span class="line">    out.write(user3.getName());</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;User&gt; list1 = (List&lt;User&gt;)application.getAttribute(&quot;list&quot;);</span><br><span class="line">    User user4=list1.get(0);</span><br><span class="line">    out.write(user4.getName());</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>class:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.bean;</span><br><span class="line"></span><br><span class="line">public class User &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String sex;</span><br><span class="line">    private String id;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getSex() &#123;</span><br><span class="line">        return sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setSex(String sex) &#123;</span><br><span class="line">        this.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>快捷键：alt+insert，创建方法，按住shift或者ctrl+a，选中多个</p><h2 id="用EL表达式："><a href="#用EL表达式：" class="headerlink" title="用EL表达式："></a>用EL表达式：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;requestScope.name&#125;</span><br><span class="line">$&#123;sessionScope.user.name&#125;</span><br><span class="line">$&#123;applicationScope.list[0].name&#125;&lt;!--在el表达式中，下标访问数组类似c--&gt;</span><br></pre></td></tr></table></figure><p>也能打印输出<br>用简单的EL表达式可以做到和复杂的Java代码一样的功能<br>最常用的功能：从域中获取数据</p><h2 id="更简便的方法："><a href="#更简便的方法：" class="headerlink" title="更简便的方法："></a>更简便的方法：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;name&#125;</span><br><span class="line">$&#123;user.name&#125;</span><br><span class="line">$&#123;list[0].name&#125;&lt;!--在el表达式中，下标访问数组类似c--&gt;</span><br></pre></td></tr></table></figure><p>同样是依次从pageContext域，request域，session域，application域中获取属性，在某个域中获取后将不在向后寻找（作用范围由小到大）<br>类似pageContext中的findAttribute(String name)方法</p><h1 id="EL的内置对象"><a href="#EL的内置对象" class="headerlink" title="EL的内置对象"></a>EL的内置对象</h1><p>在EL的表达式中可以直接使用的对象（requestScope）</p><ul><li><strong>pageScope,requestScope,sessionScope,applicationScope</strong><br>获取JSP中域中的数据，不能获取http请求中的数据</li><li>param,paramValues<br>接收参数，相当于request.getParameter() request.getParameterValues()</li><li>header,headerValues<br>获取请求头信息，相当于request.getHeader(name)</li><li>initParam<br>获取全局初始化参事，相当于this.getServletContext().getInitParameter(name)</li><li>cookie<br>WEB开发中cookie，相当于request.getCookies()–&gt;cookie.getName()–&gt;cookie.getValue()</li><li><strong>pageContext</strong><br>WEB开发中的pageContext，pageContext获得其他八大对象</li></ul><p>jsp主要用来展示数据，所以获取数据的内置对象比较常用</p><h1 id="EL的执行表达式"><a href="#EL的执行表达式" class="headerlink" title="EL的执行表达式"></a>EL的执行表达式</h1><p>在el中做一下基本运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;1+1&#125;</span><br><span class="line">$&#123;2&gt;1&#125;</span><br><span class="line">$&#123;2 eq 2&#125;</span><br><span class="line">$&#123;2&gt;1 || 3&gt;2&#125;</span><br><span class="line">$&#123;3&gt;2?true:false&#125;</span><br><span class="line">$&#123;empty user&#125;&lt;!--判断对象是否为空--&gt;</span><br></pre></td></tr></table></figure><h1 id="JSTL的简介与基本配置"><a href="#JSTL的简介与基本配置" class="headerlink" title="JSTL的简介与基本配置"></a>JSTL的简介与基本配置</h1><p>简化java中的循环、分支语句</p><h2 id="JSTL简介"><a href="#JSTL简介" class="headerlink" title="JSTL简介"></a>JSTL简介</h2><p>JSTL，JSP标准标签库，可以嵌入在JSP页面中使用标签的形式完成业务逻辑等功能，JSTL出现的目的同EL一样也是代替JSP页面中的脚本代码，JSTL标准标签库有5个子库，但随着发展，目前常使用的是他的核心库。</p><h2 id="五个标签库"><a href="#五个标签库" class="headerlink" title="五个标签库"></a>五个标签库</h2><table><thead><tr><th>标签库</th><th>标签库的URL</th><th>前缀</th></tr></thead><tbody><tr><td>Core</td><td><a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a></td><td>c</td></tr><tr><td>I18N</td><td><a href="http://java.sun.com/jsp/jstl/fmt">http://java.sun.com/jsp/jstl/fmt</a></td><td>fmt</td></tr><tr><td>SQL</td><td><a href="http://java.sun.com/jsp/jstl/sql">http://java.sun.com/jsp/jstl/sql</a></td><td>sql</td></tr><tr><td>XML</td><td><a href="http://java.sun.com/jsp/jstl/xml">http://java.sun.com/jsp/jstl/xml</a></td><td>x</td></tr><tr><td>Functions</td><td><a href="http://java.sun.com/jsp/jstl/functions">http://java.sun.com/jsp/jstl/functions</a></td><td>fn</td></tr></tbody></table><h2 id="下载JSTL标签库以及DTD文件"><a href="#下载JSTL标签库以及DTD文件" class="headerlink" title="下载JSTL标签库以及DTD文件"></a>下载JSTL标签库以及DTD文件</h2><p>jstl.jar文件包含JSTL规范中定义的接口和相关类<br>standard.jar文件包含用于实现JSTL的.class文件以及JSTL中5个标签库描述符文件(TLD)<br>将上述两个jar包放入IDEA</p><h3 id="配置DTD文件"><a href="#配置DTD文件" class="headerlink" title="配置DTD文件"></a>配置DTD文件</h3><p>IDEA—&gt;file—&gt;setting—&gt;Languages&amp;Frameworks—&gt;Schemas and DTDs<br>点击右边窗口的+号，在URL中填入<a href="http://java.sun.com/jsp/jstl/core">http://java.sun.com/jsp/jstl/core</a><br>在explorer中找到减压文件的tld目录下的c.tld文件，并选择<br><img src="https://s2.loli.net/2022/03/19/ULt1r8K4jV3XoO2.png" alt="avatar"></p><h2 id="jsp页面输入代码"><a href="#jsp页面输入代码" class="headerlink" title="jsp页面输入代码"></a>jsp页面输入代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br></pre></td></tr></table></figure><p>这样jstl文件就配置好了！</p><h1 id="JSTL-if标签"><a href="#JSTL-if标签" class="headerlink" title="JSTL-if标签"></a>JSTL-if标签</h1><ul><li>&lt;c:if&gt;标签专门用于完成JSP界面中的条件判断</li><li>表达式成立执行语句<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:if test=&quot;表达式&quot;&gt;</span><br><span class="line">//表达式成立执行语句</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure></li></ul><p>其中test是返回boolean的条件</p><h2 id="实现关注功能"><a href="#实现关注功能" class="headerlink" title="实现关注功能"></a>实现关注功能</h2><p>FollowServlet:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import javax.servlet.annotation.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@WebServlet(name = &quot;FollowServlet&quot;, value = &quot;/follow&quot;)</span><br><span class="line">public class FollowServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        //关注的时候传入follow=1.不关注的时候传入follow=0</span><br><span class="line">        String follow = request.getParameter(&quot;follow&quot;);</span><br><span class="line">        request.setAttribute(&quot;follow&quot;,follow);//把follow的值传到request域中</span><br><span class="line">        request.getRequestDispatcher(&quot;/jstl/jstl.jsp&quot;).forward(request,response);//传到jsp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jstl.jsp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: vanilla</span><br><span class="line">  Date: 19/3/2022</span><br><span class="line">  Time: 下午9:19</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;%@taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--使用jstl必须配合el表达式--%&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;requestScope.follow eq 1&#125;&quot;&gt;</span><br><span class="line">    &lt;%--test为true执行内部代码--%&gt;</span><br><span class="line">    取消关注&lt;%--可直接输出jstl内部语句--%&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;requestScope.follow eq 0&#125;&quot;&gt;</span><br><span class="line">    &lt;%--test为true执行内部代码--%&gt;</span><br><span class="line">    关注&lt;%--可直接输出jstl内部语句--%&gt;</span><br><span class="line">&lt;/c:if&gt;&lt;%--没用else标签，需要再写一个--%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="JSTL-forEach标签"><a href="#JSTL-forEach标签" class="headerlink" title="JSTL-forEach标签"></a>JSTL-forEach标签</h1><p>&lt;c:forEach&gt;用来循环遍历集合对象中的元素，如List、Map、数组等<br>和java代码中的for循环一样，它也有两种形式</p><h2 id="两种forEach方式遍历"><a href="#两种forEach方式遍历" class="headerlink" title="两种forEach方式遍历"></a>两种forEach方式遍历</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    List&lt;User&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line">    User user1 = new User();</span><br><span class="line">    user1.setName(&quot;小强&quot;);</span><br><span class="line">    user1.setSex(&quot;男&quot;);</span><br><span class="line">    User user2 = new User();</span><br><span class="line">    user2.setName(&quot;小丽&quot;);</span><br><span class="line">    user2.setSex(&quot;女&quot;);</span><br><span class="line">    list.add(user1);</span><br><span class="line">    list.add(user2);</span><br><span class="line">    request.setAttribute(&quot;list&quot;,list);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach begin=&quot;0&quot; end=&quot;$&#123;list.size()-1&#125;&quot; var=&quot;i&quot;&gt;</span><br><span class="line">    $&#123;list[i].name&#125;&lt;!--用el表达式进行输出--&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=&quot;$&#123;list&#125;&quot; var=&quot;user&quot;&gt;</span><br><span class="line">    &lt;%--item代表的是一个集合或者是数组--%&gt;</span><br><span class="line">    $&#123;user.name&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h1 id="案例：实现商品列表展示"><a href="#案例：实现商品列表展示" class="headerlink" title="案例：实现商品列表展示"></a>案例：实现商品列表展示</h1><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>1.通过Servlet动态的从数据库中获取商品，建立一个list，将这些数据放到某个域对象中<br>2.jsp再将这些数据获取出来，通过jstl、el表达式展示出来</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EL表达式获取域中数据&quot;&gt;&lt;a href=&quot;#EL表达式获取域中数据&quot; class=&quot;headerlink&quot; title=&quot;EL表达式获取域中数据&quot;&gt;&lt;/a&gt;EL表达式获取域中数据&lt;/h1&gt;&lt;p&gt;EL全名为Expression Language，它提供了在JSP中</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>Web课堂笔记3.17</title>
    <link href="http://example.com/2022/03/17/Web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B03-17/"/>
    <id>http://example.com/2022/03/17/Web%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B03-17/</id>
    <published>2022-03-17T02:08:43.000Z</published>
    <updated>2022-05-25T08:02:51.032Z</updated>
    
    <content type="html"><![CDATA[<p>JDBC数据库连接<br>1.导入mysql jdbc驱动jar包<br>2.编写数据库访问代码</p><p>String connStr&#x3D;”jdbc:mysql:&#x2F;&#x2F;localhost…………<br><em>jdbc不仅能驱动mysql数据库</em></p><p>创建表：<br>create database ecommerce;</p><p>展示所有表：<br>show tables;</p><p>创建表格属性：<br>create table t_login(id int primary key auto_increment,login_name varchar(50) not null ,password varchar(50) not null ,last_login_ip varchar(50) ,last_login_time datetime ,status int default 0);</p><p>添加表格值：<br>insert into t_login(login_name,password,last_login_ip,last_login_time,status) value(‘chenge’,’123456’,’127.0.0.0’,’2022-3-17 11:34:00’,0);</p><p>展示表格：<br>select * from t_login;</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JDBC数据库连接&lt;br&gt;1.导入mysql jdbc驱动jar包&lt;br&gt;2.编写数据库访问代码&lt;/p&gt;
&lt;p&gt;String connStr&amp;#x3D;”jdbc:mysql:&amp;#x2F;&amp;#x2F;localhost…………&lt;br&gt;&lt;em&gt;jdbc不仅能驱动mysql数据</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>JDBC的应用</title>
    <link href="http://example.com/2022/03/16/JDBC%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2022/03/16/JDBC%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2022-03-16T13:11:30.000Z</published>
    <updated>2022-05-25T08:02:44.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h1><h2 id="什么是JDBC"><a href="#什么是JDBC" class="headerlink" title="什么是JDBC"></a>什么是JDBC</h2><p>JDBC就是Java数据库连接，说白了就是用Java语言来操作数据库。原来我们操作数据库是在控制台使用SQL语句来操作数据库，JDBC是用Java语言向数据库发送SQL语句</p><h2 id="JDBC的原理"><a href="#JDBC的原理" class="headerlink" title="JDBC的原理"></a>JDBC的原理</h2><p>早期SUN公司想编写一套可以连接所有数据库的API，但是当他们刚刚开始时就发现这是不可完成的任务，因为各个厂商的数据库服务器差异太大了。后来SUN开始与数据库厂商们讨论，最终的出的结论是，由SUN提供一套访问数据库的规范（就是一组接口），并提供连接数据库的协议标准，然后各个数据库厂商会遵循SUN的规范提供一套访问自己公司的数据库服务器的API。SUN提供的规范命名为JDBC，而各个厂商提供的，遵循了JDBC规范的，可以访问自己数据库的API被称之为驱动<br><img src="https://s2.loli.net/2022/03/16/k3VZFvewjG4y6i8.png" alt="avatar"></p><h2 id="JDBC连接数据库"><a href="#JDBC连接数据库" class="headerlink" title="JDBC连接数据库"></a>JDBC连接数据库</h2><h4 id="在WEB-INF里新建lib文件夹，将jar包放进去"><a href="#在WEB-INF里新建lib文件夹，将jar包放进去" class="headerlink" title="在WEB-INF里新建lib文件夹，将jar包放进去"></a>在WEB-INF里新建lib文件夹，将jar包放进去</h4><h4 id="新建jdbc类"><a href="#新建jdbc类" class="headerlink" title="新建jdbc类"></a>新建jdbc类</h4><p>1.mysql8以上，项目引入jdbc的jar包后，项目会自动加载驱动类，如果需要手动加载类，需要注意类名与低版本不同，低版本是“com.mysql.jdbc.Driver”，而mysql8以上jdbc加载类是“com.mysql.cj.jdbc.Driver”，代码如下：<br>Class.forName(“com.mysql.cj.jdbc.Driver”);</p><p>2.mysql8以上数据库，连接字符串需要加入useSSL和serverTimezone属性，否则报错,示例如下：<br>String url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;数据库名?characterEncoding&#x3D;utf8&amp; useSSL&#x3D;false&amp; serverTimezone&#x3D;UTC<br>Connection conn &#x3D; DriverManager.getConnection(url);<br>就可以获取到指定数据库的Connection连接对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.Driver;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class jdbc &#123;</span><br><span class="line">    public static void main(String[] args) throws SQLException,ClassNotFoundException &#123;</span><br><span class="line">        //1.注册数据库的驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取数据库连接</span><br><span class="line">        String url = &quot;jdbc:mysql://localhost:3306/ecommerce?characterEncoding=utf8&amp; useSSL=false&amp; serverTimezone=UTC&quot;;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url,&quot;root&quot;,&quot;xyxcgchenge&quot;);</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：要加static<br>jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;库名<br>getConnection的参数是url，用户名，密码</p><h1 id="JDBC查询数据"><a href="#JDBC查询数据" class="headerlink" title="JDBC查询数据"></a>JDBC查询数据</h1><h2 id="获取操作数据库对象"><a href="#获取操作数据库对象" class="headerlink" title="获取操作数据库对象"></a>获取操作数据库对象</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Statement statement = conn.createStatement();</span><br></pre></td></tr></table></figure><h2 id="Statement最为重要的方法"><a href="#Statement最为重要的方法" class="headerlink" title="Statement最为重要的方法"></a>Statement最为重要的方法</h2><ul><li>int executeUpdate(String sql):执行更新操作，即执行insert、update、delete语句；返回的是修改后成功的行数</li><li>ResultSet executeQuery(String sql)：执行查询操作，执行查询操作会返回ResultSet，即结果集</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//1.注册数据库的驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取数据库连接</span><br><span class="line">        String url = &quot;jdbc:mysql://localhost:3306/mallx?characterEncoding=utf8&amp; useSSL=false&amp; serverTimezone=UTC&quot;;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url,&quot;root&quot;,&quot;xyxcgchenge&quot;);</span><br><span class="line">        //3.获取操作数据库对象</span><br><span class="line">        Statement statement = conn.createStatement();</span><br><span class="line"></span><br><span class="line">        String sql=&quot;select * from product&quot;;</span><br><span class="line">        ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line">        //4.遍历结果集</span><br><span class="line">        while (resultSet.next())&#123;</span><br><span class="line">            String name=resultSet.getString(&quot;p_name&quot;);</span><br><span class="line">            BigDecimal price=resultSet.getBigDecimal(&quot;p_price&quot;);</span><br><span class="line">            System.out.println(&quot;商品名称：&quot;+name+&quot; 商品价格：&quot;+price);</span><br><span class="line">        &#125;</span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br></pre></td></tr></table></figure><h1 id="JDBC插入数据"><a href="#JDBC插入数据" class="headerlink" title="JDBC插入数据"></a>JDBC插入数据</h1><p>**int executeUpdate(String sql):**执行更新操作，即执行insert、update、delete语句<br>int返回值指的是数据库中更新的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//1.注册数据库的驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        //2.获取数据库连接</span><br><span class="line">        String url = &quot;jdbc:mysql://localhost:3306/mall?characterEncoding=utf8&amp; useSSL=false&amp; serverTimezone=UTC&quot;;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url,&quot;root&quot;,&quot;xyxcgchenge&quot;);</span><br><span class="line"></span><br><span class="line">        Statement statement = conn.createStatement();</span><br><span class="line"></span><br><span class="line">        String sql=&quot;insert into product VALUES(null,&#x27;2300&#x27;,&#x27;http&#x27;,1,&#x27;HTC&#x27;)&quot;;</span><br><span class="line">        int resule=statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(resule);</span><br><span class="line"></span><br><span class="line">        conn.close();</span><br></pre></td></tr></table></figure><h1 id="JDBC删除和修改数据"><a href="#JDBC删除和修改数据" class="headerlink" title="JDBC删除和修改数据"></a>JDBC删除和修改数据</h1><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sql=&quot;delete from product where p_id=3&quot;;</span><br><span class="line">        int resule=statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(resule);</span><br></pre></td></tr></table></figure><p>返回删除的行数</p><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String sql=&quot;update product set p_price=4000 where p_name=&#x27;iphone7&#x27;&quot;;</span><br><span class="line">        int resule=statement.executeUpdate(sql);</span><br><span class="line">        System.out.println(resule);</span><br></pre></td></tr></table></figure><p>返回修改的行数</p><h1 id="Junit单元测试"><a href="#Junit单元测试" class="headerlink" title="Junit单元测试"></a>Junit单元测试</h1><p>在product structure里面把新建的文件夹设置成Sources，就可以在下面新建类了</p><p>在@Test，用快捷键alt+回车,添加Junit到class path<br>alt+回车抛出异常</p><p>将原来的main方法改成query()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import net.chenge.crud.query;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void before()&#123;</span><br><span class="line">        System.out.println(&quot;before&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @After</span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;after&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testSql() throws SQLException, ClassNotFoundException &#123;</span><br><span class="line">        query.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="快捷方法"><a href="#快捷方法" class="headerlink" title="快捷方法"></a>快捷方法</h2><p>在product structure中将test改成test类型<br>在query()方法上，使用快捷键ctrl+shift+t<br><img src="https://s2.loli.net/2022/03/18/GRKkpjtNQSc3ZOu.png" alt="avatar"><br>然后就会自动创建测试类啦</p><h1 id="预防SQL注入"><a href="#预防SQL注入" class="headerlink" title="预防SQL注入"></a>预防SQL注入</h1><h2 id="创建登录验证类"><a href="#创建登录验证类" class="headerlink" title="创建登录验证类"></a>创建登录验证类</h2><p>login类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.crud;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public class login &#123;</span><br><span class="line">    public void login(String account,String password) throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        String url = &quot;jdbc:mysql://localhost:3306/mall?characterEncoding=utf8&amp; useSSL=false&amp; serverTimezone=UTC&quot;;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url,&quot;root&quot;,&quot;xyxcgchenge&quot;);</span><br><span class="line">        Statement statement = conn.createStatement();</span><br><span class="line">        String sql=&quot;select * from user where account=&#x27;&quot;+account+&quot;&#x27; AND password=&#x27;&quot;+password+&quot;&#x27;&quot;;//sql语句的拼接</span><br><span class="line">        ResultSet resultSet=statement.executeQuery(sql);</span><br><span class="line">        if(resultSet.next())&#123;</span><br><span class="line">            String name=resultSet.getString(&quot;username&quot;);</span><br><span class="line">            System.out.println(name+&quot;欢迎你！&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;登陆失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loginTest：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.crud;</span><br><span class="line"></span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">import static org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line">public class loginTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void login() throws SQLException, ClassNotFoundException &#123;</span><br><span class="line">        login login=new login();</span><br><span class="line">        login.login(&quot;xiaoming&quot;,&quot;123&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果输入这样的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login.login(&quot;a&#x27; or &#x27;a&#x27;=&#x27;a&quot;,&quot;a&#x27; or &#x27;a&#x27;=&#x27;a&quot;);</span><br></pre></td></tr></table></figure><p>拼接结果：SELECT * FROM user WHERE username&#x3D;’a’ or ‘a’&#x3D;’a’ and password&#x3D;’a’ or ‘a’&#x3D;’a’<br>也能成功登录，因为or后面为true</p><h2 id="使用PreparedStatement对象防止SQL注入"><a href="#使用PreparedStatement对象防止SQL注入" class="headerlink" title="使用PreparedStatement对象防止SQL注入"></a>使用PreparedStatement对象防止SQL注入</h2><h3 id="PreparedStatement是什么？"><a href="#PreparedStatement是什么？" class="headerlink" title="PreparedStatement是什么？"></a>PreparedStatement是什么？</h3><ul><li>PreparedStatement叫预编译声明</li><li>PreparedStatement是Statement的子接口，你可以使用PreparedStatement来替换Statement<h3 id="PreparedStatement的使用"><a href="#PreparedStatement的使用" class="headerlink" title="PreparedStatement的使用"></a>PreparedStatement的使用</h3></li><li>使用Connection的PrepareStatement(String sql);<br>即创建它时就让它与一条SQL模板绑定</li><li>调用PreparedStatement的setXXX()系列方法为问号设置值</li><li>调用executeUpdate()或executeQuery()方法，但要注意，调用没有参数的方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package net.chenge.crud;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public class login &#123;</span><br><span class="line">    public void login(String account,String password) throws ClassNotFoundException, SQLException &#123;</span><br><span class="line">        Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">        String url = &quot;jdbc:mysql://localhost:3306/mall?characterEncoding=utf8&amp; useSSL=false&amp; serverTimezone=UTC&quot;;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url,&quot;root&quot;,&quot;xyxcgchenge&quot;);</span><br><span class="line">        String sql=&quot;select * from user where account=? AND password=?&quot;;//sql语句的拼接</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);//prepareStatement需要一条sql语句在创建的时候就与它绑定，所以它才能预编译</span><br><span class="line"></span><br><span class="line">        preparedStatement.setString(1,account);//在这里传入参数</span><br><span class="line">        preparedStatement.setString(2,password);</span><br><span class="line">        ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">        if(resultSet.next())&#123;</span><br><span class="line">            String name=resultSet.getString(&quot;username&quot;);</span><br><span class="line">            System.out.println(name+&quot;欢迎你！&quot;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;登陆失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用Connection创建PreparedStatement对象时，需要给出一个SQL模板，所谓SQL模板就是有”?”的SQL语句，其中”?”就是参数。<br>在得到PreparedStatement对象后，调用它的setXXX方法为”?”赋值，这样就可以得到把模板变成一条完整的SQL语句，然后再调用PreparedStatement对象的executeQuery()方法获取ResultSet对象。</p><p>注意PreparedStatement对象独有的executeQuery()方法是没有参数的，而Statement的executeQuery()是需要参数的。因为在创建PreparedStatement对象时已经让它与一条SQL模板绑定在一起了，所以在调用它的executeQuery()和executeUpdate()方法时就不再需要参数了。</p><p>PreparedStatement最大的好处就是在于重复使用同一模板，给予其不同的参数来重复的使用它，这才是真正提高效率的原因。</p><p><strong>所以，建议在今后开发中，无论什么情况，都去使用PreparedStatement，而不是Statement。</strong></p><h1 id="JDBCutils工具集"><a href="#JDBCutils工具集" class="headerlink" title="JDBCutils工具集"></a>JDBCutils工具集</h1><p>抽取项目中的重复代码，建立一个工具类简化代码<br>1.选中代码，右键refactor—&gt;method—&gt;提取一个方法<br>2.新建一个Utils包，在包下创建一个JDBCUtils类</p><p>工具类代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package Utils;</span><br><span class="line"></span><br><span class="line">import java.sql.*;</span><br><span class="line"></span><br><span class="line">public class JDBCUtils &#123;</span><br><span class="line">    public static Connection getConnection() &#123;</span><br><span class="line">        Connection connection=null;//定义并初始化</span><br><span class="line">        try &#123;</span><br><span class="line">            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">            String url = &quot;jdbc:mysql://localhost:3306/mall?characterEncoding=utf8&amp; useSSL=false&amp; serverTimezone=UTC&quot;;</span><br><span class="line">             connection = DriverManager.getConnection(url, &quot;root&quot;, &quot;xyxcgchenge&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void release(Connection conn, PreparedStatement preparedStatement, ResultSet resultSet) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if(resultSet!=null)resultSet.close();</span><br><span class="line">            if(preparedStatement!=null)preparedStatement.close();</span><br><span class="line">            if(conn!=null)conn.close();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常不要抛给调用的方法，不然每一个工具类都要调用异常</p><h2 id="优化工具类"><a href="#优化工具类" class="headerlink" title="优化工具类"></a>优化工具类</h2><p>新建file，db.propertise</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/mall</span><br><span class="line">username=root</span><br><span class="line">password=xyxcgchenge</span><br></pre></td></tr></table></figure><p>在工具类中加入静态代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">static&#123;//静态代码块即可</span><br><span class="line">        try &#123;</span><br><span class="line">            ClassLoader classLoader = JDBCUtils.class.getClassLoader();</span><br><span class="line">            InputStream resourceasStream = classLoader.getResourceAsStream(&quot;db.propertise&quot;);</span><br><span class="line">            Properties properties=new Properties();</span><br><span class="line">            properties.load(resourceasStream);</span><br><span class="line">            driver = properties.getProperty(&quot;driver&quot;);</span><br><span class="line">            url = properties.getProperty(&quot;url&quot;);</span><br><span class="line">            username = properties.getProperty(&quot;username&quot;);</span><br><span class="line">            password = properties.getProperty(&quot;password&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>把driver、url、username、password变为静态全局变量，后面在代码中可以直接使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Connection getConnection() &#123;</span><br><span class="line">        Connection connection=null;//定义并初始化</span><br><span class="line">        try &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">             connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ctrl+alt+f把选中的变量变成全局变量</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JDBC概述&quot;&gt;&lt;a href=&quot;#JDBC概述&quot; class=&quot;headerlink&quot; title=&quot;JDBC概述&quot;&gt;&lt;/a&gt;JDBC概述&lt;/h1&gt;&lt;h2 id=&quot;什么是JDBC&quot;&gt;&lt;a href=&quot;#什么是JDBC&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="JAVA Web" scheme="http://example.com/tags/JAVA-Web/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基础3.16</title>
    <link href="http://example.com/2022/03/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%803-16/"/>
    <id>http://example.com/2022/03/16/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%803-16/</id>
    <published>2022-03-16T05:18:05.000Z</published>
    <updated>2022-03-19T10:26:58.899Z</updated>
    
    <content type="html"><![CDATA[<p>random(n, m,…………):<br>1.无参数，一个数<br>2.1个数，一维数组<br>3.多个数，元组</p><p>rand():均匀分布<br>randn():正态分布</p><p>randint():随机整数</p><ul><li>没有无参数情况</li><li>一个参数：0到n-1</li><li>两个l,r:l到r-1</li><li>l,r,n：指定取n个数</li><li>l,r,一个元组(n,m,……):多维数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(np.random.randint(3))</span><br><span class="line">print(np.random.randint(3,8))</span><br><span class="line">print(np.random.randint(3,8,3))</span><br><span class="line">print(np.random.randint(3,8,(2,3)))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">7</span><br><span class="line">[7 3 3]</span><br><span class="line">[[5 7 5]</span><br><span class="line"> [3 3 5]]</span><br></pre></td></tr></table></figure><p>normal(loc,scale,size):正态分布，参数：均值，标准差，数量</p><h1 id="画出随机数分布图"><a href="#画出随机数分布图" class="headerlink" title="画出随机数分布图"></a>画出随机数分布图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">data = np.random.randn(2000,2)</span><br><span class="line">x1=data[:,0]#:表示所有行</span><br><span class="line">x2=data[:,-1]#-1表示最后一列</span><br><span class="line">plt.scatter(x1,x2)</span><br><span class="line"></span><br><span class="line">plt.rcParams[&#x27;axes.unicode_minus&#x27;]=False</span><br><span class="line">plt.rcParams[&#x27;font.sans-serif&#x27;]=&#x27;SimHei&#x27;</span><br><span class="line"></span><br><span class="line">plt.title(&#x27;随机数正态分布&#x27;,color=&#x27;b&#x27;,size=&#x27;20&#x27;)</span><br><span class="line">plt.xlabel(&#x27;X值&#x27;,color=&#x27;b&#x27;,size=&#x27;20&#x27;)</span><br><span class="line">plt.ylabel(&#x27;Y值&#x27;,color=&#x27;b&#x27;,size=&#x27;20&#x27;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="choice-函数"><a href="#choice-函数" class="headerlink" title="choice()函数"></a>choice()函数</h2><ul><li>从给定的一维数组中随机抽取元素构成数组【一维或多维】</li><li>np.random.choice(array,size,p)数组，大小（数或元组），概率（数组）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(5)</span><br><span class="line">np.random.choice(a,3)</span><br></pre></td></tr></table></figure>数组a中选3个<br>相当于：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(5,3)</span><br></pre></td></tr></table></figure>0-4中选三个</li></ul><p>np.random.choice(5,(2,3))<br>选6个，构成二维数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.choice(5,(2,3),p=[1,0,0,0,0])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([[0, 0, 0],</span><br><span class="line">       [0, 0, 0]], dtype=int64)</span><br></pre></td></tr></table></figure><h1 id="迭代、切片、索引"><a href="#迭代、切片、索引" class="headerlink" title="迭代、切片、索引"></a>迭代、切片、索引</h1><p><img src="https://s2.loli.net/2022/03/16/Kig4CBVsYeINFry.png" alt="avatar"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(12)</span><br><span class="line">a.resize(3,4)</span><br><span class="line">print(a)</span><br><span class="line">print(&#x27;获得单个元素:&#x27;,a[-1,-1])</span><br><span class="line">print(&#x27;获得多行多列:&#x27;,a[1:,1:])#第一行开始，第一列开始</span><br><span class="line">print(&#x27;获得多个不连续元素:&#x27;,a[[0,1],[-2,-1]])#逗号前面是行，逗号后面是列</span><br><span class="line">print(&#x27;获得一行:&#x27;,a[2:])#冒号可以省略</span><br><span class="line">print(&#x27;获得多行并且重新排列:&#x27;,a[[2,0],:])#中括号括起来，2在前面，0在后面,只写行，逗号后面可以省略</span><br><span class="line">print(&#x27;获得一列:&#x27;,a[:,2])</span><br><span class="line">print(&#x27;获得多列:\n&#x27;,a[:,[0,2]])</span><br><span class="line">print(&#x27;获得多行多列:\n&#x27;,a[0:2,1:3])</span><br></pre></td></tr></table></figure><p>迭代：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a=np.arange(0,60,5).reshape(3,-1)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">for x in a:</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">for x in a:</span><br><span class="line">    for y in x:</span><br><span class="line">        print(y,end=&#x27; &#x27;)</span><br><span class="line"></span><br><span class="line">for ele in a.flat:</span><br><span class="line">    print(ele,end=&#x27; &#x27;)</span><br></pre></td></tr></table></figure><p>[[ 0  5 10 15]<br> [20 25 30 35]<br> [40 45 50 55]]<br>[ 0  5 10 15]<br>[20 25 30 35]<br>[40 45 50 55]<br>0 5 10 15 20 25 30 35 40 45 50 55 0 5 10 15 20 25 30 35 40 45 50 55 </p><ul><li>.ravel()方法用于展开数组元素，将多维ndaarray转换成一维ndarray</li><li>横向按行展开，不会影响原数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.flatten可以按行也可以按列展开，不影响原数组</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">a=np.arange(8).reshape(2,-1)</span><br><span class="line">print(a)</span><br><span class="line">print(a.ravel())</span><br><span class="line">print(a.flatten(&#x27;f&#x27;))#纵向</span><br><span class="line">print(a.flatten())#默认横向</span><br></pre></td></tr></table></figure><p>[[0 1 2 3]<br> [4 5 6 7]]<br>[0 1 2 3 4 5 6 7]<br>[0 4 1 5 2 6 3 7]<br>[0 1 2 3 4 5 6 7]</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;random(n, m,…………):&lt;br&gt;1.无参数，一个数&lt;br&gt;2.1个数，一维数组&lt;br&gt;3.多个数，元组&lt;/p&gt;
&lt;p&gt;rand():均匀分布&lt;br&gt;randn():正态分布&lt;/p&gt;
&lt;p&gt;randint():随机整数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有无参数情况&lt;/</summary>
      
    
    
    
    
  </entry>
  
</feed>
